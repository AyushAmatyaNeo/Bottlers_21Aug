create or replace TRIGGER HRIS_AFTER_EMPLOYEE_PENALTY AFTER
  INSERT OR
  DELETE ON HRIS_EMPLOYEE_PENALTY_DAYS FOR EACH ROW BEGIN IF INSERTING THEN
  UPDATE HRIS_EMPLOYEE_LEAVE_ASSIGN
  SET BALANCE       = BALANCE-:new.NO_OF_DAYS
  WHERE EMPLOYEE_ID =:new.EMPLOYEE_ID
  AND LEAVE_ID      = :new.LEAVE_ID;
  NULL;
END IF;
IF DELETING THEN
  UPDATE HRIS_EMPLOYEE_LEAVE_ASSIGN
  SET BALANCE       = BALANCE+:old.NO_OF_DAYS
  WHERE EMPLOYEE_ID =:old.EMPLOYEE_ID
  AND LEAVE_ID      = :old.LEAVE_ID;
END IF;
END;/
            create or replace TRIGGER HRIS_AFTER_LEAVE_ADDITION AFTER
  INSERT OR
  DELETE ON HRIS_EMPLOYEE_LEAVE_ADDITION FOR EACH ROW BEGIN IF INSERTING THEN
  UPDATE HRIS_EMPLOYEE_LEAVE_ASSIGN
  SET BALANCE       = BALANCE   +:new.NO_OF_DAYS,
    TOTAL_DAYS      = TOTAL_DAYS+:new.NO_OF_DAYS
  WHERE EMPLOYEE_ID =:new.EMPLOYEE_ID
  AND LEAVE_ID      = :new.LEAVE_ID;
END IF;
IF DELETING THEN
  UPDATE HRIS_EMPLOYEE_LEAVE_ASSIGN
  SET BALANCE       = BALANCE   -:old.NO_OF_DAYS,
    TOTAL_DAYS      = TOTAL_DAYS-:old.NO_OF_DAYS
  WHERE EMPLOYEE_ID =:new.EMPLOYEE_ID
  AND LEAVE_ID      = :new.LEAVE_ID;
END IF;
END;/
            DROP TRIGGER APPRAISAL_STATUS_TRIGGER;

CREATE OR REPLACE TRIGGER HRIS_APPRAISAL_STAT_TRG AFTER
  INSERT ON HRIS_APPRAISAL_ASSIGN FOR EACH ROW BEGIN
  INSERT
  INTO HRIS_APPRAISAL_STATUS
    (
      EMPLOYEE_ID,
      APPRAISAL_ID
    )
    VALUES
    (
      :new.EMPLOYEE_ID,
      :new.APPRAISAL_ID
    );
END;/
            CREATE OR REPLACE TRIGGER HRIS_BEFORE_LEAVE_REQUEST BEFORE
  UPDATE ON HRIS_EMPLOYEE_LEAVE_REQUEST FOR EACH ROW DECLARE V_BALANCE NUMBER(3,1);
  V_IS_MONTHLY HRIS_LEAVE_MASTER_SETUP.IS_MONTHLY%TYPE;
  V_FISCAL_YEAR_MONTH_NO HRIS_MONTH_CODE.FISCAL_YEAR_MONTH_NO%TYPE;
  BEGIN
    SELECT IS_MONTHLY
    INTO V_IS_MONTHLY
    FROM HRIS_LEAVE_MASTER_SETUP
    WHERE LEAVE_ID =:new.LEAVE_ID;
    --
    IF V_IS_MONTHLY = 'N' THEN
      IF(:new.HALF_DAY            IN ('F','S')) THEN
        V_BALANCE:= :new.NO_OF_DAYS/2;
      ELSE
        V_BALANCE:= :new.NO_OF_DAYS;
      END IF;
      IF :old.STATUS IN ('RQ','RC') AND :new.STATUS ='AP' THEN
        UPDATE HRIS_EMPLOYEE_LEAVE_ASSIGN
        SET BALANCE       = BALANCE -V_BALANCE
        WHERE EMPLOYEE_ID = :new.EMPLOYEE_ID
        AND LEAVE_ID      =:new.LEAVE_ID;
      ELSIF :old.STATUS   ='AP' AND :new.STATUS = 'C' THEN
        UPDATE HRIS_EMPLOYEE_LEAVE_ASSIGN
        SET BALANCE       = BALANCE +V_BALANCE
        WHERE EMPLOYEE_ID = :new.EMPLOYEE_ID
        AND LEAVE_ID      =:new.LEAVE_ID;
      END IF;
    END IF;
    --
    IF V_IS_MONTHLY = 'Y' THEN
      SELECT FISCAL_YEAR_MONTH_NO
      INTO V_FISCAL_YEAR_MONTH_NO
      FROM HRIS_MONTH_CODE
      WHERE TRUNC(:new.START_DATE) BETWEEN FROM_DATE AND TO_DATE;
      --
      V_BALANCE := :new.NO_OF_DAYS;
      --
      IF :old.STATUS IN ('RQ','RC') AND :new.STATUS ='AP' THEN
        UPDATE HRIS_EMPLOYEE_LEAVE_ASSIGN
        SET BALANCE              = BALANCE -V_BALANCE
        WHERE EMPLOYEE_ID        = :new.EMPLOYEE_ID
        AND LEAVE_ID             =:new.LEAVE_ID
        AND FISCAL_YEAR_MONTH_NO =V_FISCAL_YEAR_MONTH_NO;
      ELSIF :old.STATUS          ='AP' AND :new.STATUS = 'C' THEN
        UPDATE HRIS_EMPLOYEE_LEAVE_ASSIGN
        SET BALANCE              = BALANCE +V_BALANCE
        WHERE EMPLOYEE_ID        = :new.EMPLOYEE_ID
        AND LEAVE_ID             =:new.LEAVE_ID
        AND FISCAL_YEAR_MONTH_NO =V_FISCAL_YEAR_MONTH_NO;
      END IF;
      NULL ;
    END IF;
  END;/
            create or replace TRIGGER HRIS_EMPLOYEE_ADD AFTER
  INSERT ON HRIS_EMPLOYEES FOR EACH ROW DECLARE V_FISCAL_YEAR_ID HRIS_FISCAL_YEARS.FISCAL_YEAR_ID%TYPE;
  V_MONTH_ID HRIS_MONTH_CODE.MONTH_ID%TYPE;
  V_CURRENT_MONTH_COUNT NUMBER;
  V_DEFAULT_DAYS        NUMBER;
  V_PRODATA_DAYS        NUMBER;
  BEGIN
    BEGIN
      SELECT FISCAL_YEAR_ID,
        MONTH_ID
      INTO V_FISCAL_YEAR_ID,
        V_MONTH_ID
      FROM HRIS_MONTH_CODE
      WHERE TRUNC(SYSDATE) BETWEEN FROM_DATE AND TO_DATE;
    EXCEPTION
    WHEN no_data_found THEN
      SYS.DBMS_OUTPUT.PUT('No Current Month found.');
      RETURN;
    END;
    SELECT MONTH_ROWNUM
    INTO V_CURRENT_MONTH_COUNT
    FROM
      (SELECT ROWNUM AS MONTH_ROWNUM,
        MONTH_ID
      FROM HRIS_MONTH_CODE
      WHERE FISCAL_YEAR_ID= V_FISCAL_YEAR_ID
      ORDER BY FROM_DATE
      ) MONTHS
    WHERE MONTH_ID =V_MONTH_ID;
    BEGIN
      FOR leave IN
      (SELECT LEAVE_ID,
        DEFAULT_DAYS,
        IS_PRODATA_BASIS
      FROM HRIS_LEAVE_MASTER_SETUP
      WHERE STATUS                 ='E'
      AND ASSIGN_ON_EMPLOYEE_SETUP ='Y'
      )
      LOOP
        V_DEFAULT_DAYS           := leave.DEFAULT_DAYS;
        V_PRODATA_DAYS           := leave.DEFAULT_DAYS;
        IF leave.IS_PRODATA_BASIS = 'Y' THEN
          V_PRODATA_DAYS         :=ROUND(V_DEFAULT_DAYS*((13-V_CURRENT_MONTH_COUNT)/12));
        END IF;
        INSERT
        INTO HRIS_EMPLOYEE_LEAVE_ASSIGN
          (
            EMPLOYEE_ID,
            LEAVE_ID,
            PREVIOUS_YEAR_BAL,
            TOTAL_DAYS,
            BALANCE,
            FISCAL_YEAR,
            CREATED_DT
          )
          VALUES
          (
            :new.EMPLOYEE_ID,
            leave.LEAVE_ID,
            0,
            V_PRODATA_DAYS,
            V_PRODATA_DAYS,
            V_FISCAL_YEAR_ID,
            TRUNC(SYSDATE)
          );
      END LOOP;
    END;
    BEGIN
      FOR holiday IN
      (SELECT HOLIDAY_ID
        FROM HRIS_HOLIDAY_MASTER_SETUP
        WHERE ASSIGN_ON_EMPLOYEE_SETUP = 'Y'
        AND STATUS                     ='E'
        AND START_DATE                >=TRUNC(SYSDATE)
      )
      LOOP
        INSERT
        INTO HRIS_EMPLOYEE_HOLIDAY
          (
            EMPLOYEE_ID,
            HOLIDAY_ID
          )
          VALUES
          (
            :new.EMPLOYEE_ID,
            holiday.HOLIDAY_ID
          );
      END LOOP;
    END;
  END;/
            DROP TRIGGER UPDATE_FULL_NAME;

create or replace TRIGGER HRIS_UPDATE_FULL_NAME BEFORE
  UPDATE OR
  INSERT ON HRIS_EMPLOYEES FOR EACH ROW BEGIN IF INSERTING THEN :new.FULL_NAME := CONCAT(CONCAT(CONCAT(TRIM(:new.FIRST_NAME),' '),
    CASE
      WHEN :new.MIDDLE_NAME IS NOT NULL
      THEN CONCAT(TRIM(:new.MIDDLE_NAME), ' ')
      ELSE ''
    END ),TRIM(:new.LAST_NAME));
  RETURN;
ELSIF UPDATING THEN
  IF (:old.FIRST_NAME !=:new.FIRST_NAME OR :old.LAST_NAME !=:new.LAST_NAME OR (:old.MIDDLE_NAME IS NULL AND :new.MIDDLE_NAME IS NOT NULL) OR (:old.MIDDLE_NAME IS NOT NULL AND :new.MIDDLE_NAME IS NULL) OR :old.MIDDLE_NAME !=:new.MIDDLE_NAME ) THEN
    :new.FULL_NAME    := CONCAT(CONCAT(CONCAT(TRIM(:new.FIRST_NAME),' '),
    CASE
    WHEN :new.MIDDLE_NAME IS NOT NULL THEN
      CONCAT(TRIM(:new.MIDDLE_NAME), ' ')
    ELSE
      ''
    END ),TRIM(:new.LAST_NAME));
  END IF;
END IF;
END;/
            DROP TRIGGER USER_SETTING_TRIGGER;

CREATE OR REPLACE TRIGGER HRIS_USER_SETTING_TRG AFTER
  INSERT ON HRIS_USERS FOR EACH ROW BEGIN
  INSERT INTO HRIS_USER_SETTING
    (USER_ID
    ) VALUES
    (:new.USER_ID
    );
END;
/
            