CREATE OR REPLACE PROCEDURE HRIS_ATTENDANCE_NOTIFICATION(
    P_EMPLOYEE_ID HRIS_ATTENDANCE_DETAIL.EMPLOYEE_ID%TYPE,
    P_MESSAGE_DATETIME HRIS_NOTIFICATION.MESSAGE_DATETIME%TYPE,
    P_OVERALL_STATUS HRIS_ATTENDANCE_DETAIL.OVERALL_STATUS%TYPE,
    P_LATE_STATUS HRIS_ATTENDANCE_DETAIL.LATE_STATUS%TYPE)
AS
  V_MESSAGE_TITLE HRIS_NOTIFICATION.MESSAGE_TITLE%TYPE :=NULL;
  V_MESSAGE_DESC HRIS_NOTIFICATION.MESSAGE_DESC%TYPE   :=NULL;
  V_ROUTE HRIS_NOTIFICATION.ROUTE%TYPE                 :=NULL;
BEGIN
  IF P_OVERALL_STATUS = 'AB' THEN
    V_MESSAGE_TITLE  := 'Attendance Notification';
    V_MESSAGE_DESC   := 'Request for leave? You were absent on '||TO_CHAR(P_MESSAGE_DATETIME,'DD-MON-YYYY') ||'.';
    V_ROUTE          :='{"route":"leaverequest","action":"add"}';
  END IF;
  --
  IF P_OVERALL_STATUS = 'LA' THEN
    V_MESSAGE_TITLE  := 'Attendance Notification';
    V_MESSAGE_DESC   := 'Request for leave? You have been given Three day late absent penalty on '||TO_CHAR(P_MESSAGE_DATETIME,'DD-MON-YYYY') ||'.';
    V_ROUTE          :='{"route":"leaverequest","action":"add"}';
  END IF;
  --
  IF P_OVERALL_STATUS = 'BA' THEN
    V_MESSAGE_TITLE  := 'Attendance Notification';
    V_MESSAGE_DESC   := 'Request for leave? You have been given Late In and Early out on same day penalty on '||TO_CHAR(P_MESSAGE_DATETIME,'DD-MON-YYYY') ||'.';
    V_ROUTE          :='{"route":"leaverequest","action":"add"}';
  END IF;
  --
  IF (P_LATE_STATUS  ='X' OR P_LATE_STATUS ='Y') THEN
    V_MESSAGE_TITLE := 'Attendance Notification';
    V_MESSAGE_DESC  := 'Request for attendance? Missed punch on '||TO_CHAR(P_MESSAGE_DATETIME,'DD-MON-YYYY') ||' Detected.';
    V_ROUTE         :='{"route":"attendancerequest","action":"add"}';
  END IF;
  IF (V_MESSAGE_TITLE IS NOT NULL AND V_MESSAGE_DESC IS NOT NULL AND V_ROUTE IS NOT NULL) THEN
    HRIS_SYSTEM_NOTIFICATION(P_EMPLOYEE_ID,P_MESSAGE_DATETIME,V_MESSAGE_TITLE,V_MESSAGE_DESC,V_ROUTE);
  END IF;
END;    CREATE OR REPLACE PROCEDURE HRIS_BACKDATE_ATTENDANCE(
    P_ATTENDANCE_DT DATE,
    P_EMPLOYEE_ID HRIS_EMPLOYEES.EMPLOYEE_ID%TYPE,
    P_IN_TIME  TIMESTAMP,
    P_OUT_TIME TIMESTAMP)
AS
BEGIN
  IF P_IN_TIME IS NOT NULL THEN
    INSERT
    INTO HRIS_ATTENDANCE
      (
        ATTENDANCE_DT,
        EMPLOYEE_ID,
        ATTENDANCE_TIME,
        ATTENDANCE_FROM
      )
      VALUES
      (
        P_ATTENDANCE_DT,
        P_EMPLOYEE_ID,
        P_IN_TIME,
        'SYSTEM'
      );
  END IF;
  IF P_OUT_TIME IS NOT NULL THEN
    INSERT
    INTO HRIS_ATTENDANCE
      (
        ATTENDANCE_DT,
        EMPLOYEE_ID,
        ATTENDANCE_TIME,
        ATTENDANCE_FROM
      )
      VALUES
      (
        P_ATTENDANCE_DT,
        P_EMPLOYEE_ID,
        P_OUT_TIME,
        'SYSTEM'
      );
  END IF;
  IF (TRUNC(P_ATTENDANCE_DT) < TRUNC(SYSDATE)) THEN
    HRIS_REATTENDANCE(P_ATTENDANCE_DT,P_EMPLOYEE_ID);
  END IF;
END; CREATE OR REPLACE PROCEDURE HRIS_COMPULSORY_OT_CANCEL(
    P_COMPULSORY_OT_ID HRIS_COMPULSORY_OVERTIME.COMPULSORY_OVERTIME_ID%TYPE)
AS
  V_START_DATE DATE;
  V_END_DATE   DATE;
  V_DATE_DIFF  NUMBER;
BEGIN
  SELECT START_DATE,
    END_DATE,
    (TRUNC(END_DATE)-TRUNC(START_DATE))
  INTO V_START_DATE,
    V_END_DATE,
    V_DATE_DIFF
  FROM HRIS_COMPULSORY_OVERTIME
  WHERE COMPULSORY_OVERTIME_ID = P_COMPULSORY_OT_ID;
  FOR i IN 0..V_DATE_DIFF
  LOOP
    FOR ot IN
    (SELECT *
    FROM HRIS_OVERTIME
    WHERE DESCRIPTION = 'THIS IS AUTOGENERATED OT REQUEST FROM COMPULSORY OT.'
    AND OVERTIME_DATE = TRUNC(V_START_DATE+ i)
    AND EMPLOYEE_ID                      IN
      (SELECT EMPLOYEE_ID
      FROM HRIS_EMPLOYEE_COMPULSORY_OT
      WHERE COMPULSORY_OVERTIME_ID = P_COMPULSORY_OT_ID
      )
    )
    LOOP
      DELETE FROM HRIS_OVERTIME_DETAIL WHERE OVERTIME_ID = ot.OVERTIME_ID;
      --
      DELETE FROM HRIS_OVERTIME WHERE OVERTIME_ID = ot.OVERTIME_ID;
    END LOOP;
  END LOOP;
  UPDATE HRIS_COMPULSORY_OVERTIME
  SET STATUS                   ='D'
  WHERE COMPULSORY_OVERTIME_ID = P_COMPULSORY_OT_ID;
END;CREATE OR REPLACE PROCEDURE HRIS_COMPULSORY_OT_PROC(
    V_DATE DATE)
AS
  V_COMPULSORY_OVERTIME_ID NUMBER;
TYPE OVERTIME_DETAIL_TYPE
IS
  TABLE OF HRIS_OVERTIME_DETAIL%ROWTYPE INDEX BY BINARY_INTEGER;
  V_OT_DETAIL OVERTIME_DETAIL_TYPE;
  V_DESCRIPTION    VARCHAR2(255 BYTE):='THIS IS AUTOGENERATED OT REQUEST FROM COMPULSORY OT.';
  V_TOTAL_HOUR     NUMBER;
  V_OVERTIME_ID    NUMBER;
  V_DETAIL_ID      NUMBER;
  V_MESSAGE_ID     NUMBER;
  V_TO_EMPLOYEE_ID NUMBER;
  V_ROLE_ID        NUMBER;
  V_ROUTE          VARCHAR2(4000 BYTE);
  V_EMPLOYEE_NAME  VARCHAR2(255 BYTE);
BEGIN
  FOR cot IN
  (SELECT  *
  FROM HRIS_COMPULSORY_OVERTIME
  WHERE TRUNC(V_DATE) BETWEEN START_DATE AND END_DATE
  )
  LOOP
    V_COMPULSORY_OVERTIME_ID:=cot.COMPULSORY_OVERTIME_ID;
    BEGIN
      FOR ot IN
      (SELECT EMPLOYEE_ID,
        ATTENDANCE_DT,
        IN_TIME,
        OUT_TIME,
        START_TIME,
        END_TIME,
        EXTRACT(HOUR FROM EARLY_OT_HR)*60+EXTRACT(MINUTE FROM EARLY_OT_HR) AS ACT_EARLY_OT_HR,
        EXTRACT(HOUR FROM LATE_OT_HR) *60+EXTRACT(MINUTE FROM LATE_OT_HR)  AS ACT_LATE_OT_HR,
        EARLY_OVERTIME_HR,
        LATE_OVERTIME_HR
      FROM
        (SELECT AD.EMPLOYEE_ID,
          AD.ATTENDANCE_DT,
          AD.IN_TIME,
          AD.OUT_TIME,
          S.START_TIME,
          S.END_TIME,
          ((S.START_TIME-TRUNC(S.START_TIME))-(AD.IN_TIME -TRUNC(AD.IN_TIME))) AS EARLY_OT_HR,
          ((AD.OUT_TIME -TRUNC(AD.OUT_TIME))-(S.END_TIME-TRUNC(S.END_TIME)))   AS LATE_OT_HR,
          OT.EARLY_OVERTIME_HR,
          OT.LATE_OVERTIME_HR
        FROM HRIS_ATTENDANCE_DETAIL AD ,
          (SELECT COT.EARLY_OVERTIME_HR,
            COT.LATE_OVERTIME_HR,
            COT.START_DATE,
            COT.END_DATE,
            ECOT.EMPLOYEE_ID
          FROM HRIS_COMPULSORY_OVERTIME COT
          JOIN HRIS_EMPLOYEE_COMPULSORY_OT ECOT
          ON (COT.COMPULSORY_OVERTIME_ID  = ECOT.COMPULSORY_OVERTIME_ID)
          WHERE COT.COMPULSORY_OVERTIME_ID=V_COMPULSORY_OVERTIME_ID
          ) OT,
          HRIS_SHIFTS S
        WHERE AD.EMPLOYEE_ID    =OT.EMPLOYEE_ID
        AND AD.ATTENDANCE_DT    =TRUNC(V_DATE)
        AND AD.OVERALL_STATUS  IN ('PR','LA','BA')
        AND AD.LATE_STATUS NOT IN ('X','Y')
        AND AD.SHIFT_ID         =S.SHIFT_ID
        )
      )
      LOOP
        V_OT_DETAIL.DELETE;
        V_TOTAL_HOUR:=0;
        --
        IF(ot.EARLY_OVERTIME_HR    >=30) AND (ot.ACT_EARLY_OT_HR >=30) THEN
          V_OT_DETAIL(0).START_TIME:=ot.IN_TIME ;
          V_OT_DETAIL(0).END_TIME  :=ot.START_TIME;
          V_OT_DETAIL(0).STATUS    :='E';
          V_OT_DETAIL(0).TOTAL_HOUR:=ot.ACT_EARLY_OT_HR;
          V_TOTAL_HOUR             :=V_TOTAL_HOUR+ot.ACT_EARLY_OT_HR;
        END IF;
        IF(ot.LATE_OVERTIME_HR     >=30) AND (ot.ACT_LATE_OT_HR >=30) THEN
          V_OT_DETAIL(1).START_TIME:=ot.END_TIME;
          V_OT_DETAIL(1).END_TIME  :=ot.OUT_TIME;
          V_OT_DETAIL(1).STATUS    :='E';
          V_OT_DETAIL(1).TOTAL_HOUR:=ot.ACT_LATE_OT_HR;
          V_TOTAL_HOUR             :=V_TOTAL_HOUR+ot.ACT_LATE_OT_HR;
        END IF;
        IF(V_OT_DETAIL.COUNT >0) THEN
          SELECT NVL(MAX(OVERTIME_ID),1)+1 INTO V_OVERTIME_ID FROM HRIS_OVERTIME;
          INSERT
          INTO HRIS_OVERTIME
            (
              OVERTIME_ID,
              EMPLOYEE_ID,
              OVERTIME_DATE,
              REQUESTED_DATE,
              DESCRIPTION,
              STATUS,
              TOTAL_HOUR
            )
            VALUES
            (
              V_OVERTIME_ID,
              ot.EMPLOYEE_ID,
              ot.ATTENDANCE_DT,
              ot.ATTENDANCE_DT,
              V_DESCRIPTION,
              'RQ',
              V_TOTAL_HOUR
            );
          FOR i IN V_OT_DETAIL.FIRST .. V_OT_DETAIL.LAST
          LOOP
            SELECT NVL(MAX(DETAIL_ID),1)+1 INTO V_DETAIL_ID FROM HRIS_OVERTIME_DETAIL;
            INSERT
            INTO HRIS_OVERTIME_DETAIL
              (
                DETAIL_ID,
                OVERTIME_ID,
                START_TIME,
                END_TIME,
                STATUS,
                TOTAL_HOUR
              )
              VALUES
              (
                V_DETAIL_ID,
                V_OVERTIME_ID,
                V_OT_DETAIL(i).START_TIME,
                V_OT_DETAIL(i).END_TIME,
                'E',
                V_OT_DETAIL(i).TOTAL_HOUR
              );
          END LOOP;
          SELECT NVL(MAX(MESSAGE_ID),0)+1 INTO V_MESSAGE_ID FROM HRIS_NOTIFICATION;
          SELECT RECOMMEND_BY,
            (
            CASE
              WHEN RECOMMEND_BY=APPROVED_BY
              THEN 4
              ELSE 2
            END)
          INTO V_TO_EMPLOYEE_ID,
            V_ROLE_ID
          FROM HRIS_RECOMMENDER_APPROVER
          WHERE EMPLOYEE_ID = ot.EMPLOYEE_ID;
          V_ROUTE          :='{"route":"overtimeApprove","action":"view","id":"'||V_OVERTIME_ID||'","role":'||V_ROLE_ID||'}';
          SELECT FULL_NAME
          INTO V_EMPLOYEE_NAME
          FROM HRIS_EMPLOYEES
          WHERE EMPLOYEE_ID=ot.EMPLOYEE_ID;
          INSERT
          INTO HRIS_NOTIFICATION
            (
              MESSAGE_ID,
              MESSAGE_DATETIME,
              MESSAGE_TITLE,
              MESSAGE_DESC,
              MESSAGE_FROM,
              MESSAGE_TO,
              STATUS,
              EXPIRY_TIME,
              ROUTE
            )
            VALUES
            (
              V_MESSAGE_ID,
              V_DATE,
              'Compulsory OT',
              'OT REQUEST OF '
              ||V_EMPLOYEE_NAME
              ||' FROM THE DATE '
              ||TO_CHAR(ot.ATTENDANCE_DT,'DD-MON-YYYY'),
              ot.EMPLOYEE_ID,
              V_TO_EMPLOYEE_ID,
              'U',
              V_DATE+14,
              V_ROUTE
            );
        END IF;
      END LOOP;
    END;
  END LOOP;
END;create or replace PROCEDURE HRIS_CREATE_USER_ACCOUNTS(
    P_PASSWORD HRIS_USERS.PASSWORD%TYPE := 'password@123')
AS
  V_USER_ID  NUMBER :=20;
  V_USERNAME VARCHAR2(255 BYTE);
BEGIN
  FOR CUR_EMP IN
  (SELECT EMPLOYEE_ID,
    FIRST_NAME,
    MIDDLE_NAME,
    LAST_NAME
  FROM HRIS_EMPLOYEES
  WHERE EMPLOYEE_ID NOT IN
    (SELECT EMPLOYEE_ID FROM HRIS_USERS WHERE STATUS ='E'
    )
  )
  LOOP
    BEGIN
      SELECT NVL(MAX(USER_ID),0)+1 INTO V_USER_ID FROM HRIS_USERS;
      V_USERNAME := CONCAT(CONCAT(CONCAT(LOWER(TRIM(CUR_EMP.FIRST_NAME)),'_'),
      CASE
      WHEN CUR_EMP.MIDDLE_NAME IS NOT NULL THEN
        CONCAT(LOWER(TRIM(CUR_EMP.MIDDLE_NAME)), '_')
      ELSE
        ''
      END ),LOWER(TRIM(CUR_EMP.LAST_NAME)));
      INSERT
      INTO HRIS_USERS
        (
          USER_ID,
          EMPLOYEE_ID,
          USER_NAME,
          PASSWORD,
          ROLE_ID,
          STATUS,
          CREATED_DT
        )
        VALUES
        (
          V_USER_ID,
          CUR_EMP.EMPLOYEE_ID,
          V_USERNAME,
          P_PASSWORD,
          11,
          'E',
          TRUNC(SYSDATE)
        );
    END;
  END LOOP;
END;CREATE OR REPLACE PROCEDURE HRIS_DAILY_SYSTEM_CHECK(
    P_DATE DATE:=NULL)
AS
  V_DATE            DATE;
  IS_START_OF_MONTH CHAR(1 BYTE);
BEGIN
  --SET DATE
  IF P_DATE IS NULL THEN
    V_DATE  :=TRUNC(SYSDATE);
  ELSE
    V_DATE :=TRUNC(P_DATE);
  END IF;
  --
  BEGIN
    SELECT 'Y'
    INTO IS_START_OF_MONTH
    FROM HRIS_MONTH_CODE
    WHERE TRUNC(FROM_DATE) = V_DATE;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    IS_START_OF_MONTH:='N';
  END;
  --SERVICE STATUS UPDATE
  FOR service IN
  (SELECT * FROM HRIS_JOB_HISTORY WHERE EVENT_DATE =V_DATE
  )
  LOOP
    HRIS_UPDATE_EMPLOYEE_SERVICE(service.JOB_HISTORY_ID);
  END LOOP;
  --END OF SERVICE STATUS UPDATE
  --  RESET MONTHLY LEAVES
  IF IS_START_OF_MONTH='Y' THEN
    HRIS_RECALC_MONTHLY_LEAVES;
  END IF;
  --  END OF RESET MONTHLY LEAVES
END;CREATE OR REPLACE PROCEDURE HRIS_EMPLOYEE_SETUP_PROC(
    P_EMPLOYEE_ID HRIS_EMPLOYEES.EMPLOYEE_ID%TYPE)
AS
  V_JOIN_DATE HRIS_EMPLOYEES.JOIN_DATE%TYPE;
  V_FISCAL_YEAR_ID HRIS_FISCAL_YEARS.FISCAL_YEAR_ID%TYPE;
  V_MONTH_ID HRIS_MONTH_CODE.MONTH_ID%TYPE;
  V_CURRENT_MONTH_COUNT NUMBER;
  V_IS_EMP_IN           CHAR(1 BYTE);
  V_PRODATA_DAYS        NUMBER;
BEGIN
  BEGIN
    SELECT JOIN_DATE
    INTO V_JOIN_DATE
    FROM HRIS_EMPLOYEES
    WHERE EMPLOYEE_ID = P_EMPLOYEE_ID;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    SYS.DBMS_OUTPUT.PUT_LINE('NO JOIN_DATE SET FROM THE EMPLOYEE WITH EMPLOYEE_ID : '||P_EMPLOYEE_ID);
    RETURN;
  END;
  BEGIN
    SELECT FISCAL_YEAR_ID,
      MONTH_ID,
      MONTH_NO
    INTO V_FISCAL_YEAR_ID,
      V_MONTH_ID,
      V_CURRENT_MONTH_COUNT
    FROM HRIS_MONTH_CODE
    WHERE TRUNC(V_JOIN_DATE) BETWEEN FROM_DATE AND TO_DATE;
  EXCEPTION
  WHEN no_data_found THEN
    SYS.DBMS_OUTPUT.PUT('No Current Month found.');
    RETURN;
  END;
  BEGIN
    FOR leave IN
    (SELECT LEAVE_ID,
      DEFAULT_DAYS,
      IS_PRODATA_BASIS
    FROM HRIS_LEAVE_MASTER_SETUP
    WHERE STATUS                 ='E'
    AND ASSIGN_ON_EMPLOYEE_SETUP ='Y'
    )
    LOOP
      V_IS_EMP_IN    := HRIS_IS_EMP_IN(P_EMPLOYEE_ID,'HRIS_LEAVE_MASTER_SETUP','LEAVE_ID',leave.LEAVE_ID);
      IF V_IS_EMP_IN !='Y' THEN
        CONTINUE;
      END IF;
      V_PRODATA_DAYS           := leave.DEFAULT_DAYS;
      IF leave.IS_PRODATA_BASIS = 'Y' THEN
        V_PRODATA_DAYS         :=ROUND(leave.DEFAULT_DAYS*((13-V_CURRENT_MONTH_COUNT)/12));
      END IF;
      INSERT
      INTO HRIS_EMPLOYEE_LEAVE_ASSIGN
        (
          EMPLOYEE_ID,
          LEAVE_ID,
          PREVIOUS_YEAR_BAL,
          TOTAL_DAYS,
          BALANCE,
          FISCAL_YEAR,
          CREATED_DT
        )
        VALUES
        (
          P_EMPLOYEE_ID,
          leave.LEAVE_ID,
          0,
          V_PRODATA_DAYS,
          V_PRODATA_DAYS,
          V_FISCAL_YEAR_ID,
          TRUNC(SYSDATE)
        );
    END LOOP;
  END;
  BEGIN
    FOR holiday IN
    (SELECT HOLIDAY_ID
      FROM HRIS_HOLIDAY_MASTER_SETUP
      WHERE ASSIGN_ON_EMPLOYEE_SETUP = 'Y'
      AND STATUS                     ='E'
      AND START_DATE                >=TRUNC(V_JOIN_DATE)
    )
    LOOP
      INSERT
      INTO HRIS_EMPLOYEE_HOLIDAY
        (
          EMPLOYEE_ID,
          HOLIDAY_ID
        )
        VALUES
        (
          P_EMPLOYEE_ID,
          holiday.HOLIDAY_ID
        );
    END LOOP;
  END;
END;CREATE OR REPLACE PROCEDURE HRIS_HOLIDAY_ASSIGN_AUTO(
    P_HOLIDAY_ID HRIS_HOLIDAY_MASTER_SETUP.HOLIDAY_ID%TYPE)
AS
  V_ASSIGN_COUNT           NUMBER;
  V_COMPANY_IDS            VARCHAR2(1000 BYTE) :=NULL;
  V_BRANCH_IDS             VARCHAR2(1000 BYTE) :=NULL;
  V_DEPARTMENT_IDS         VARCHAR2(1000 BYTE) :=NULL;
  V_DESIGNATION_IDS        VARCHAR2(1000 BYTE) :=NULL;
  V_POSITION_IDS           VARCHAR2(1000 BYTE) :=NULL;
  V_SERVICE_TYPE_IDS       VARCHAR2(1000 BYTE) :=NULL;
  V_SERVICE_EVENT_TYPE_IDS VARCHAR2(1000 BYTE) :=NULL;
  V_EMPLOYEE_TYPES         VARCHAR2(1000 BYTE) :=NULL;
  V_GENDER_IDS             VARCHAR2(1000 BYTE) :=NULL;
  V_EMPLOYEE_IDS           VARCHAR2(1000 BYTE) :=NULL;
  V_QUERY                  VARCHAR2(1000 BYTE);
  V_EMPLOYEE_ID            NUMBER;
  --
  V_START_DATE HRIS_HOLIDAY_MASTER_SETUP.START_DATE%TYPE;
TYPE cur_typ
IS
  REF
  CURSOR;
    c cur_typ;
  BEGIN
    SELECT START_DATE
    INTO V_START_DATE
    FROM HRIS_HOLIDAY_MASTER_SETUP
    WHERE HOLIDAY_ID=P_HOLIDAY_ID;
  --
  DELETE FROM HRIS_EMPLOYEE_HOLIDAY WHERE HOLIDAY_ID=P_HOLIDAY_ID;
  --
  SELECT COUNT(*)
  INTO V_ASSIGN_COUNT
  FROM HRIS_HOLIDAY_ASSIGN
  WHERE HOLIDAY_ID=P_HOLIDAY_ID;
  --
  IF(V_ASSIGN_COUNT=0) THEN
    V_QUERY       :='SELECT EMPLOYEE_ID FROM HRIS_EMPLOYEES';
  ELSE
    FOR assign IN
    (SELECT * FROM HRIS_HOLIDAY_ASSIGN WHERE HOLIDAY_ID= P_HOLIDAY_ID
    )
    LOOP
      IF(assign.COMPANY_ID IS NOT NULL)THEN
        IF(V_COMPANY_IDS   IS NULL)THEN
          V_COMPANY_IDS    :=V_COMPANY_IDS||assign.COMPANY_ID;
        ELSE
          V_COMPANY_IDS :=V_COMPANY_IDS||','||assign.COMPANY_ID;
        END IF;
      END IF;
      --
      IF(assign.BRANCH_ID IS NOT NULL)THEN
        IF(V_BRANCH_IDS   IS NULL)THEN
          V_BRANCH_IDS    :=V_BRANCH_IDS||assign.BRANCH_ID;
        ELSE
          V_BRANCH_IDS :=V_BRANCH_IDS||','||assign.BRANCH_ID;
        END IF;
      END IF;
      --
      IF(assign.DEPARTMENT_ID IS NOT NULL)THEN
        IF(V_DEPARTMENT_IDS   IS NULL)THEN
          V_DEPARTMENT_IDS    :=V_DEPARTMENT_IDS||assign.DEPARTMENT_ID;
        ELSE
          V_DEPARTMENT_IDS :=V_DEPARTMENT_IDS||','||assign.DEPARTMENT_ID;
        END IF;
      END IF;
      --
      IF(assign.DESIGNATION_ID IS NOT NULL)THEN
        IF(V_DESIGNATION_IDS   IS NULL)THEN
          V_DESIGNATION_IDS    :=V_DESIGNATION_IDS||assign.DESIGNATION_ID;
        ELSE
          V_DESIGNATION_IDS :=V_DESIGNATION_IDS||','||assign.DESIGNATION_ID;
        END IF;
      END IF;
      --
      IF(assign.POSITION_ID IS NOT NULL)THEN
        IF(V_POSITION_IDS   IS NULL)THEN
          V_POSITION_IDS    :=V_POSITION_IDS||assign.POSITION_ID;
        ELSE
          V_POSITION_IDS :=V_POSITION_IDS||','||assign.POSITION_ID;
        END IF;
      END IF;
      --
      IF(assign.SERVICE_TYPE_ID IS NOT NULL)THEN
        IF(V_SERVICE_TYPE_IDS   IS NULL)THEN
          V_SERVICE_TYPE_IDS    :=V_SERVICE_TYPE_IDS||assign.SERVICE_TYPE_ID;
        ELSE
          V_SERVICE_TYPE_IDS :=V_SERVICE_TYPE_IDS||','||assign.SERVICE_TYPE_ID;
        END IF;
      END IF;
      --
      IF(assign.SERVICE_EVENT_TYPE_ID IS NOT NULL)THEN
        IF(V_SERVICE_EVENT_TYPE_IDS   IS NULL)THEN
          V_SERVICE_EVENT_TYPE_IDS    :=V_SERVICE_EVENT_TYPE_IDS||assign.SERVICE_EVENT_TYPE_ID;
        ELSE
          V_SERVICE_EVENT_TYPE_IDS :=V_SERVICE_EVENT_TYPE_IDS||','||assign.SERVICE_EVENT_TYPE_ID;
        END IF;
      END IF;
      --
      IF(assign.EMPLOYEE_TYPE IS NOT NULL)THEN
        IF(V_EMPLOYEE_TYPES   IS NULL)THEN
          V_EMPLOYEE_TYPES    :=V_EMPLOYEE_TYPES||'''' ||assign.EMPLOYEE_TYPE||'''';
        ELSE
          V_EMPLOYEE_TYPES :=V_EMPLOYEE_TYPES||','''||assign.EMPLOYEE_TYPE||'''';
        END IF;
      END IF;
      --
      IF(assign.GENDER_ID IS NOT NULL)THEN
        IF(V_GENDER_IDS   IS NULL)THEN
          V_GENDER_IDS    :=V_GENDER_IDS||assign.GENDER_ID;
        ELSE
          V_GENDER_IDS :=V_GENDER_IDS||','||assign.GENDER_ID;
        END IF;
      END IF;
      --
      IF(assign.EMPLOYEE_ID IS NOT NULL)THEN
        IF(V_EMPLOYEE_IDS   IS NULL)THEN
          V_EMPLOYEE_IDS    :=V_EMPLOYEE_IDS||assign.EMPLOYEE_ID;
        ELSE
          V_EMPLOYEE_IDS :=V_EMPLOYEE_IDS||','||assign.EMPLOYEE_ID;
        END IF;
      END IF;
      --
    END LOOP;
    --
    V_QUERY          := 'SELECT EMPLOYEE_ID FROM HRIS_EMPLOYEES WHERE 1=1';
    IF(V_COMPANY_IDS IS NOT NULL) THEN
      V_QUERY        :=V_QUERY||' AND COMPANY_ID IN ('||V_COMPANY_IDS||')';
    END IF;
    IF(V_BRANCH_IDS IS NOT NULL) THEN
      V_QUERY       :=V_QUERY||' AND BRANCH_ID IN ('||V_BRANCH_IDS||')';
    END IF;
    IF(V_DEPARTMENT_IDS IS NOT NULL) THEN
      V_QUERY           :=V_QUERY||' AND DEPARTMENT_ID IN ('||V_DEPARTMENT_IDS||')';
    END IF;
    IF(V_DESIGNATION_IDS IS NOT NULL) THEN
      V_QUERY            :=V_QUERY||' AND DESIGNATION_ID IN ('||V_DESIGNATION_IDS||')';
    END IF;
    IF(V_POSITION_IDS IS NOT NULL) THEN
      V_QUERY         :=V_QUERY||' AND POSITION_ID IN ('||V_POSITION_IDS||')';
    END IF;
    IF(V_SERVICE_TYPE_IDS IS NOT NULL) THEN
      V_QUERY             :=V_QUERY||' AND SERVICE_TYPE_ID IN ('||V_SERVICE_TYPE_IDS||')';
    END IF;
    IF(V_SERVICE_EVENT_TYPE_IDS IS NOT NULL) THEN
      V_QUERY                   :=V_QUERY||' AND SERVICE_EVENT_TYPE_ID IN ('||V_SERVICE_EVENT_TYPE_IDS||')';
    END IF;
    IF(V_EMPLOYEE_TYPES IS NOT NULL) THEN
      V_QUERY           :=V_QUERY||' AND EMPLOYEE_TYPE IN ('||V_EMPLOYEE_TYPES||')';
    END IF;
    IF(V_GENDER_IDS IS NOT NULL) THEN
      V_QUERY       :=V_QUERY||' AND GENDER_ID IN ('||V_GENDER_IDS||')';
    END IF;
    IF(V_EMPLOYEE_IDS IS NOT NULL) THEN
      V_QUERY         :=V_QUERY||' AND EMPLOYEE_ID IN ('||V_EMPLOYEE_IDS||')';
    END IF;
  END IF;
  OPEN c FOR V_QUERY ;
  LOOP
    FETCH c INTO V_EMPLOYEE_ID;
    EXIT
  WHEN c%NOTFOUND;
    INSERT
    INTO HRIS_EMPLOYEE_HOLIDAY
      (
        HOLIDAY_ID,
        EMPLOYEE_ID
      )
      VALUES
      (
        P_HOLIDAY_ID,
        V_EMPLOYEE_ID
      );
    IF(V_START_DATE <= TRUNC(SYSDATE)) THEN
      HRIS_REATTENDANCE(TRUNC(V_START_DATE),V_EMPLOYEE_ID);
    END IF;
  END LOOP;
  CLOSE c;
END;CREATE OR REPLACE PROCEDURE HRIS_JOBS_PROC
AS
BEGIN
  FOR jobs IN
  (SELECT * FROM HRIS_JOBS WHERE EXECUTED ='N'
  )
  LOOP
    BEGIN
      EXECUTE IMMEDIATE jobs.WHAT;
      UPDATE HRIS_JOBS
      SET EXECUTED  ='Y',
        STATUS      ='S',
        EXECUTED_AT =SYSDATE
      WHERE JOB_ID  = jobs.JOB_ID;
    EXCEPTION
    WHEN OTHERS THEN
      UPDATE HRIS_JOBS
      SET EXECUTED  ='Y',
        STATUS      ='F',
        EXECUTED_AT =SYSDATE
      WHERE JOB_ID  = jobs.JOB_ID;
    END;
  END LOOP;
END;create or replace PROCEDURE HRIS_LATE_LEAVE_DEDUCTION(
    P_MONTH_ID HRIS_MONTH_CODE.MONTH_ID%TYPE,
    P_DEDUCTION_DAY FLOAT,
    P_EMPLOYEE_ID HRIS_EMPLOYEES.EMPLOYEE_ID%TYPE)
AS
  V_MONTH_START_DATE HRIS_MONTH_CODE.FROM_DATE%TYPE;
  V_MONTH_END_DATE HRIS_MONTH_CODE.TO_DATE %TYPE;
  V_YEAR                                   NUMBER;
  V_MONTH_NO                               NUMBER;
  V_LEAVE_ID HRIS_LEAVE_MASTER_SETUP.LEAVE_ID%TYPE;
  V_ALREADY_DEDUCTED_FLAG CHAR(1 BYTE);
BEGIN
  SELECT FROM_DATE,
    TO_DATE,
    YEAR,
    MONTH_NO
  INTO V_MONTH_START_DATE,
    V_MONTH_END_DATE,
    V_YEAR,
    V_MONTH_NO
  FROM HRIS_MONTH_CODE
  WHERE MONTH_ID= P_MONTH_ID;
  --
  DELETE
  FROM HRIS_EMPLOYEE_PENALTY_DAYS
  WHERE TRUNC(ATTENDANCE_DT) BETWEEN V_MONTH_START_DATE AND V_MONTH_END_DATE;
  --
  SELECT (
    CASE
      WHEN COUNT(*) >0
      THEN 'Y'
      ELSE 'N'
    END)
  INTO V_ALREADY_DEDUCTED_FLAG
  FROM HRIS_PENALIZED_MONTHS
  WHERE YEAR                 =V_YEAR
  AND MONTH_NO               =V_MONTH_NO;
  IF V_ALREADY_DEDUCTED_FLAG ='Y' THEN
    UPDATE HRIS_PENALIZED_MONTHS
    SET NO_OF_DAYS  =P_DEDUCTION_DAY,
      MODIFIED_DATE =TRUNC(SYSDATE),
      MODIFIED_BY   = P_EMPLOYEE_ID
    WHERE YEAR      =V_YEAR
    AND MONTH_NO    =V_MONTH_NO;
  ELSE
    INSERT
    INTO HRIS_PENALIZED_MONTHS
      (
        YEAR,
        MONTH_NO,
        NO_OF_DAYS,
        CREATED_DATE,
        CREATED_BY
      )
      VALUES
      (
        V_YEAR,
        V_MONTH_NO,
        P_DEDUCTION_DAY,
        TRUNC(SYSDATE),
        P_EMPLOYEE_ID
      );
  END IF;
  --
  FOR attendance IN
  (SELECT         *
    FROM HRIS_ATTENDANCE_DETAIL
    WHERE (TRUNC(ATTENDANCE_DT) BETWEEN V_MONTH_START_DATE AND V_MONTH_END_DATE)
    AND OVERALL_STATUS IN ('BA','LA')
  )
  LOOP
    BEGIN
      SELECT LEAVE_ID
      INTO V_LEAVE_ID
      FROM
        (SELECT L.LEAVE_ID
        FROM HRIS_EMPLOYEE_LEAVE_ASSIGN LA
        JOIN HRIS_LEAVE_MASTER_SETUP L
        ON (LA.LEAVE_ID   =L.LEAVE_ID)
        WHERE EMPLOYEE_ID =attendance.EMPLOYEE_ID
        AND LA.BALANCE   >=P_DEDUCTION_DAY
        ORDER BY L.DEDUCTION_PRIORITY_NO
        )
      WHERE ROWNUM=1;
    EXCEPTION
    WHEN no_data_found THEN
      SELECT LEAVE_ID
      INTO V_LEAVE_ID
      FROM
        (SELECT L.LEAVE_ID
        FROM HRIS_EMPLOYEE_LEAVE_ASSIGN LA
        JOIN HRIS_LEAVE_MASTER_SETUP L
        ON (LA.LEAVE_ID   =L.LEAVE_ID)
        WHERE EMPLOYEE_ID =attendance.EMPLOYEE_ID
        ORDER BY L.DEDUCTION_PRIORITY_NO
        )
      WHERE ROWNUM=1;
    END;
    --
    INSERT
    INTO HRIS_EMPLOYEE_PENALTY_DAYS
      (
        EMPLOYEE_ID,
        ATTENDANCE_DT,
        LEAVE_ID,
        NO_OF_DAYS,
        REMARKS,
        CREATED_DATE
      )
      VALUES
      (
        attendance.EMPLOYEE_ID,
        attendance.ATTENDANCE_DT,
        V_LEAVE_ID,
        P_DEDUCTION_DAY,
        '4th day penalty',
        TRUNC(SYSDATE)
      );
  END LOOP;
END;CREATE OR REPLACE PROCEDURE HRIS_MANUAL_ATTENDANCE(
    P_EMPLOYEE_ID HRIS_ATTENDANCE_DETAIL.EMPLOYEE_ID%TYPE ,
    P_ATTENDANCE_DT HRIS_ATTENDANCE_DETAIL.ATTENDANCE_DT%TYPE,
    P_STATUS CHAR )
AS
BEGIN
  FOR attendance IN
  (SELECT A.EMPLOYEE_ID,
    A.ATTENDANCE_DT,
    S.START_TIME,
    S.END_TIME,
    A.OVERALL_STATUS
  FROM HRIS_ATTENDANCE_DETAIL A
  JOIN HRIS_SHIFTS S
  ON (A.SHIFT_ID   =S.SHIFT_ID)
  WHERE EMPLOYEE_ID=P_EMPLOYEE_ID
  AND ATTENDANCE_DT= P_ATTENDANCE_DT
  )
  LOOP
    IF P_STATUS ='P' THEN
      INSERT
      INTO HRIS_ATTENDANCE
        (
          EMPLOYEE_ID,
          ATTENDANCE_DT,
          ATTENDANCE_TIME,
          ATTENDANCE_FROM
        )
        VALUES
        (
          attendance.EMPLOYEE_ID,
          attendance.ATTENDANCE_DT,
          TO_DATE(TO_CHAR(attendance.ATTENDANCE_DT,'DD-MON-YYYY')
          ||' '
          ||TO_CHAR(attendance.START_TIME,'HH24:MI'),'DD-MON-YYYY HH24:MI' ),
          'SYSTEM'
        );
      INSERT
      INTO HRIS_ATTENDANCE
        (
          EMPLOYEE_ID,
          ATTENDANCE_DT,
          ATTENDANCE_TIME,
          ATTENDANCE_FROM
        )
        VALUES
        (
          attendance.EMPLOYEE_ID,
          attendance.ATTENDANCE_DT,
          TO_DATE(TO_CHAR(attendance.ATTENDANCE_DT,'DD-MON-YYYY')
          ||' '
          ||TO_CHAR(attendance.END_TIME,'HH24:MI'),'DD-MON-YYYY HH24:MI' ),
          'SYSTEM'
        );
    END IF;
    IF P_STATUS ='A' THEN
      DELETE
      FROM HRIS_ATTENDANCE
      WHERE EMPLOYEE_ID=P_EMPLOYEE_ID
      AND ATTENDANCE_DT= P_ATTENDANCE_DT;
    END IF ;
    HRIS_REATTENDANCE(attendance.ATTENDANCE_DT,attendance.EMPLOYEE_ID);
  END LOOP;
END;CREATE OR REPLACE PROCEDURE HRIS_MENU_ROLE_ASSIGN(
    P_MENU_ID     NUMBER,
    P_ROLE_ID     NUMBER,
    P_ASSIGN_FLAG CHAR )
AS
  V_EXIST_FLAG CHAR(1 BYTE);
BEGIN
  IF P_ASSIGN_FLAG ='Y' THEN
    FOR childs IN
    (SELECT MENU_ID,
      MENU_NAME,
      PARENT_MENU,
      STATUS,
      LEVEL
    FROM HRIS_MENUS
    WHERE STATUS             ='E'
      START WITH MENU_ID     =P_MENU_ID
      CONNECT BY PARENT_MENU = PRIOR MENU_ID
    ORDER SIBLINGS BY MENU_ID
    )
    LOOP
      SELECT (
        CASE
          WHEN COUNT(*) >0
          THEN 'Y'
          ELSE 'N'
        END)
      INTO V_EXIST_FLAG
      FROM HRIS_ROLE_PERMISSIONS
      WHERE MENU_ID   = childs.MENU_ID
      AND ROLE_ID     = P_ROLE_ID;
      IF(V_EXIST_FLAG = 'N') THEN
        INSERT
        INTO HRIS_ROLE_PERMISSIONS
          (
            ROLE_ID,
            MENU_ID,
            STATUS,
            CREATED_DT
          )
          VALUES
          (
            P_ROLE_ID,
            childs.MENU_ID,
            'E',
            TRUNC(SYSDATE)
          );
      END IF;
    END LOOP;
    FOR childs IN
    (SELECT MENU_ID,
        MENU_NAME,
        PARENT_MENU,
        STATUS,
        LEVEL
      FROM HRIS_MENUS
      WHERE STATUS                   ='E'
        START WITH MENU_ID           =P_MENU_ID
        CONNECT BY PRIOR PARENT_MENU = MENU_ID
      ORDER SIBLINGS BY MENU_ID
    )
    LOOP
      SELECT (
        CASE
          WHEN COUNT(*) >0
          THEN 'Y'
          ELSE 'N'
        END)
      INTO V_EXIST_FLAG
      FROM HRIS_ROLE_PERMISSIONS
      WHERE MENU_ID   = childs.MENU_ID
      AND ROLE_ID     = P_ROLE_ID;
      IF(V_EXIST_FLAG = 'N') THEN
        INSERT
        INTO HRIS_ROLE_PERMISSIONS
          (
            ROLE_ID,
            MENU_ID,
            STATUS,
            CREATED_DT
          )
          VALUES
          (
            P_ROLE_ID,
            childs.MENU_ID,
            'E',
            TRUNC(SYSDATE)
          );
      END IF;
    END LOOP;
  ELSE
    FOR childs IN
    (SELECT MENU_ID,
        MENU_NAME,
        PARENT_MENU,
        STATUS,
        LEVEL
      FROM HRIS_MENUS
      WHERE STATUS             ='E'
        START WITH MENU_ID     =P_MENU_ID
        CONNECT BY PARENT_MENU = PRIOR MENU_ID
      ORDER SIBLINGS BY MENU_ID
    )
    LOOP
      DELETE
      FROM HRIS_ROLE_PERMISSIONS
      WHERE ROLE_ID =P_ROLE_ID
      AND MENU_ID   = childs.MENU_ID;
    END LOOP;
  END IF;
END;create or replace PROCEDURE HRIS_NEWS_BROADCAST(
    P_NEWS_DATE HRIS_NEWS.NEWS_DATE%TYPE,
    P_NEWS_TYPE HRIS_NEWS.NEWS_TYPE%TYPE,
    P_SERVICE_TYPE_ID NUMBER,
    P_EMPLOYEE_ID     NUMBER,
    P_DESC HRIS_NEWS.NEWS_EDESC%TYPE,
    P_COMPANY_ID HRIS_NEWS.COMPANY_ID%TYPE,
    P_BRANCH_ID HRIS_NEWS.BRANCH_ID%TYPE,
    P_DESIGNATION_ID HRIS_NEWS.DESIGNATION_ID%TYPE,
    P_DEPARTMENT_ID HRIS_NEWS.DEPARTMENT_ID%TYPE)
AS
  P_NEWS_ID HRIS_NEWS.NEWS_ID%TYPE;
  P_NEWS_TITLE HRIS_NEWS.NEWS_TITLE%TYPE;
  P_NEWS_EDESC HRIS_NEWS.NEWS_EDESC%TYPE;
  P_STATUS HRIS_NEWS.STATUS%TYPE:='E';
  P_EMPLOYEE_NAME VARCHAR2(255 BYTE);
BEGIN
  SELECT NVL(MAX (NEWS_ID),0) + 1 INTO P_NEWS_ID FROM HRIS_NEWS;
  SELECT SERVICE_EVENT_TYPE_NAME
  INTO P_NEWS_TITLE
  FROM HRIS_SERVICE_EVENT_TYPES
  WHERE SERVICE_EVENT_TYPE_ID=P_SERVICE_TYPE_ID;
  SELECT (FIRST_NAME
    ||' '
    ||MIDDLE_NAME
    ||' '
    ||LAST_NAME)
  INTO P_EMPLOYEE_NAME
  FROM HRIS_EMPLOYEES
  WHERE EMPLOYEE_ID=P_EMPLOYEE_ID;
  CASE P_SERVICE_TYPE_ID
  WHEN 1 THEN
    P_NEWS_EDESC:=CONCAT(P_EMPLOYEE_NAME,CONCAT(' Has Been Transfered',P_DESC));
  WHEN 2 THEN
    P_NEWS_EDESC:=CONCAT(P_EMPLOYEE_NAME,CONCAT(' Has Been Appointed',P_DESC));
  WHEN 3 THEN
    P_NEWS_EDESC:=CONCAT(P_EMPLOYEE_NAME,CONCAT(' Has Been Pramoted',P_DESC));
  WHEN 4 THEN
    P_NEWS_EDESC:=CONCAT(P_EMPLOYEE_NAME,CONCAT(' Has Been Demoted',P_DESC));
  WHEN 5 THEN
    P_NEWS_EDESC:=CONCAT(P_EMPLOYEE_NAME,CONCAT(' Has Resigned',P_DESC));
  WHEN 8 THEN
    P_NEWS_EDESC:=CONCAT(P_EMPLOYEE_NAME,CONCAT(' Has Retired',P_DESC));
  WHEN 14 THEN
    P_NEWS_EDESC:=CONCAT(P_EMPLOYEE_NAME,CONCAT(' Has Been Suspended',P_DESC));
  WHEN 15 THEN
    P_NEWS_EDESC:=CONCAT(P_EMPLOYEE_NAME,CONCAT(' is Temporary Assigned',P_DESC));
  WHEN 16 THEN
    P_NEWS_EDESC:=CONCAT(P_EMPLOYEE_NAME,CONCAT(' Awarded',P_DESC));
  ELSE
    P_NEWS_EDESC:=P_NEWS_TITLE;
  END CASE;
  INSERT
  INTO HRIS_NEWS
    (
      NEWS_ID,
      NEWS_DATE,
      NEWS_TYPE,
      NEWS_TITLE,
      NEWS_EDESC,
      COMPANY_ID,
      CREATED_BY,
      STATUS,
      BRANCH_ID,
      DESIGNATION_ID,
      DEPARTMENT_ID
    )
    VALUES
    (
      P_NEWS_ID,
      P_NEWS_DATE,
      P_NEWS_TYPE,
      P_NEWS_TITLE,
      P_NEWS_EDESC,
      P_COMPANY_ID,
      P_EMPLOYEE_ID,
      P_STATUS,
      P_BRANCH_ID,
      P_DESIGNATION_ID,
      P_DEPARTMENT_ID
    );
END;create or replace PROCEDURE HRIS_NEWS_TO_PROC(
    P_NEWS_ID HRIS_NEWS.NEWS_ID%TYPE)
AS
  V_ASSIGN_COUNT           NUMBER;
  V_COMPANY_IDS            VARCHAR2(1000 BYTE) :=NULL;
  V_BRANCH_IDS             VARCHAR2(1000 BYTE) :=NULL;
  V_DEPARTMENT_IDS         VARCHAR2(1000 BYTE) :=NULL;
  V_DESIGNATION_IDS        VARCHAR2(1000 BYTE) :=NULL;
  V_POSITION_IDS           VARCHAR2(1000 BYTE) :=NULL;
  V_SERVICE_TYPE_IDS       VARCHAR2(1000 BYTE) :=NULL;
  V_SERVICE_EVENT_TYPE_IDS VARCHAR2(1000 BYTE) :=NULL;
  V_EMPLOYEE_TYPES         VARCHAR2(1000 BYTE) :=NULL;
  V_GENDER_IDS             VARCHAR2(1000 BYTE) :=NULL;
  V_EMPLOYEE_IDS           VARCHAR2(1000 BYTE) :=NULL;
  V_QUERY                  VARCHAR2(1000 BYTE);
  V_EMPLOYEE_ID            NUMBER;
  --
TYPE cur_typ
IS
  REF
  CURSOR;
    c cur_typ;
  BEGIN
    --
    DELETE FROM HRIS_NEWS_EMPLOYEE WHERE NEWS_ID=P_NEWS_ID;
  --
  SELECT COUNT(*)
  INTO V_ASSIGN_COUNT
  FROM HRIS_NEWS_TO
  WHERE NEWS_ID=P_NEWS_ID;
  --
  IF(V_ASSIGN_COUNT=0) THEN
    V_QUERY       :='SELECT EMPLOYEE_ID FROM HRIS_EMPLOYEES WHERE STATUS = ''E''';
  ELSE
    FOR assign IN
    (SELECT * FROM HRIS_NEWS_TO WHERE NEWS_ID= P_NEWS_ID
    )
    LOOP
      IF(assign.COMPANY_ID IS NOT NULL)THEN
        IF(V_COMPANY_IDS   IS NULL)THEN
          V_COMPANY_IDS    :=V_COMPANY_IDS||assign.COMPANY_ID;
        ELSE
          V_COMPANY_IDS :=V_COMPANY_IDS||','||assign.COMPANY_ID;
        END IF;
      END IF;
      --
      IF(assign.BRANCH_ID IS NOT NULL)THEN
        IF(V_BRANCH_IDS   IS NULL)THEN
          V_BRANCH_IDS    :=V_BRANCH_IDS||assign.BRANCH_ID;
        ELSE
          V_BRANCH_IDS :=V_BRANCH_IDS||','||assign.BRANCH_ID;
        END IF;
      END IF;
      --
      IF(assign.DEPARTMENT_ID IS NOT NULL)THEN
        IF(V_DEPARTMENT_IDS   IS NULL)THEN
          V_DEPARTMENT_IDS    :=V_DEPARTMENT_IDS||assign.DEPARTMENT_ID;
        ELSE
          V_DEPARTMENT_IDS :=V_DEPARTMENT_IDS||','||assign.DEPARTMENT_ID;
        END IF;
      END IF;
      --
      IF(assign.DESIGNATION_ID IS NOT NULL)THEN
        IF(V_DESIGNATION_IDS   IS NULL)THEN
          V_DESIGNATION_IDS    :=V_DESIGNATION_IDS||assign.DESIGNATION_ID;
        ELSE
          V_DESIGNATION_IDS :=V_DESIGNATION_IDS||','||assign.DESIGNATION_ID;
        END IF;
      END IF;
      --
      IF(assign.POSITION_ID IS NOT NULL)THEN
        IF(V_POSITION_IDS   IS NULL)THEN
          V_POSITION_IDS    :=V_POSITION_IDS||assign.POSITION_ID;
        ELSE
          V_POSITION_IDS :=V_POSITION_IDS||','||assign.POSITION_ID;
        END IF;
      END IF;
      --
      IF(assign.SERVICE_TYPE_ID IS NOT NULL)THEN
        IF(V_SERVICE_TYPE_IDS   IS NULL)THEN
          V_SERVICE_TYPE_IDS    :=V_SERVICE_TYPE_IDS||assign.SERVICE_TYPE_ID;
        ELSE
          V_SERVICE_TYPE_IDS :=V_SERVICE_TYPE_IDS||','||assign.SERVICE_TYPE_ID;
        END IF;
      END IF;
      --
      IF(assign.SERVICE_EVENT_TYPE_ID IS NOT NULL)THEN
        IF(V_SERVICE_EVENT_TYPE_IDS   IS NULL)THEN
          V_SERVICE_EVENT_TYPE_IDS    :=V_SERVICE_EVENT_TYPE_IDS||assign.SERVICE_EVENT_TYPE_ID;
        ELSE
          V_SERVICE_EVENT_TYPE_IDS :=V_SERVICE_EVENT_TYPE_IDS||','||assign.SERVICE_EVENT_TYPE_ID;
        END IF;
      END IF;
      --
      IF(assign.EMPLOYEE_TYPE IS NOT NULL)THEN
        IF(V_EMPLOYEE_TYPES   IS NULL)THEN
          V_EMPLOYEE_TYPES    :=V_EMPLOYEE_TYPES||'''' ||assign.EMPLOYEE_TYPE||'''';
        ELSE
          V_EMPLOYEE_TYPES :=V_EMPLOYEE_TYPES||','''||assign.EMPLOYEE_TYPE||'''';
        END IF;
      END IF;
      --
      IF(assign.GENDER_ID IS NOT NULL)THEN
        IF(V_GENDER_IDS   IS NULL)THEN
          V_GENDER_IDS    :=V_GENDER_IDS||assign.GENDER_ID;
        ELSE
          V_GENDER_IDS :=V_GENDER_IDS||','||assign.GENDER_ID;
        END IF;
      END IF;
      --
      IF(assign.EMPLOYEE_ID IS NOT NULL)THEN
        IF(V_EMPLOYEE_IDS   IS NULL)THEN
          V_EMPLOYEE_IDS    :=V_EMPLOYEE_IDS||assign.EMPLOYEE_ID;
        ELSE
          V_EMPLOYEE_IDS :=V_EMPLOYEE_IDS||','||assign.EMPLOYEE_ID;
        END IF;
      END IF;
      --
    END LOOP;
    --
    V_QUERY          := 'SELECT EMPLOYEE_ID FROM HRIS_EMPLOYEES WHERE 1=1';
    IF(V_COMPANY_IDS IS NOT NULL) THEN
      V_QUERY        :=V_QUERY||' AND COMPANY_ID IN ('||V_COMPANY_IDS||')';
    END IF;
    IF(V_BRANCH_IDS IS NOT NULL) THEN
      V_QUERY       :=V_QUERY||' AND BRANCH_ID IN ('||V_BRANCH_IDS||')';
    END IF;
    IF(V_DEPARTMENT_IDS IS NOT NULL) THEN
      V_QUERY           :=V_QUERY||' AND DEPARTMENT_ID IN ('||V_DEPARTMENT_IDS||')';
    END IF;
    IF(V_DESIGNATION_IDS IS NOT NULL) THEN
      V_QUERY            :=V_QUERY||' AND DESIGNATION_ID IN ('||V_DESIGNATION_IDS||')';
    END IF;
    IF(V_POSITION_IDS IS NOT NULL) THEN
      V_QUERY         :=V_QUERY||' AND POSITION_ID IN ('||V_POSITION_IDS||')';
    END IF;
    IF(V_SERVICE_TYPE_IDS IS NOT NULL) THEN
      V_QUERY             :=V_QUERY||' AND SERVICE_TYPE_ID IN ('||V_SERVICE_TYPE_IDS||')';
    END IF;
    IF(V_SERVICE_EVENT_TYPE_IDS IS NOT NULL) THEN
      V_QUERY                   :=V_QUERY||' AND SERVICE_EVENT_TYPE_ID IN ('||V_SERVICE_EVENT_TYPE_IDS||')';
    END IF;
    IF(V_EMPLOYEE_TYPES IS NOT NULL) THEN
      V_QUERY           :=V_QUERY||' AND EMPLOYEE_TYPE IN ('||V_EMPLOYEE_TYPES||')';
    END IF;
    IF(V_GENDER_IDS IS NOT NULL) THEN
      V_QUERY       :=V_QUERY||' AND GENDER_ID IN ('||V_GENDER_IDS||')';
    END IF;
    IF(V_EMPLOYEE_IDS IS NOT NULL) THEN
      V_QUERY         :=V_QUERY||' AND EMPLOYEE_ID IN ('||V_EMPLOYEE_IDS||')';
    END IF;
  END IF;
  OPEN c FOR V_QUERY ;
  LOOP
    FETCH c INTO V_EMPLOYEE_ID;
    EXIT
  WHEN c%NOTFOUND;
    INSERT
    INTO HRIS_NEWS_EMPLOYEE
      (
        NEWS_ID,
        EMPLOYEE_ID
      )
      VALUES
      (
        P_NEWS_ID,
        V_EMPLOYEE_ID
      );
  END LOOP;
  CLOSE c;
END;CREATE OR REPLACE PROCEDURE HRIS_NOTIFY_BIRTHDAYS(
    P_DATETIME DATE:=NULL)
AS
BEGIN
  FOR birthday_employees IN
  (SELECT EMP.EMPLOYEE_ID,
    EMP.FULL_NAME,
    EMP.BIRTH_DATE,
    TO_CHAR(EMP.BIRTH_DATE, 'fmddth Month') EMP_BIRTH_DATE
  FROM HRIS_EMPLOYEES EMP
  WHERE TO_CHAR(EMP.BIRTH_DATE, 'MMDD') = TO_CHAR(SYSDATE,'MMDD')
  AND EMP.RETIRED_FLAG                  = 'N'
  AND EMP.STATUS                        ='E'
  )
  LOOP
    BEGIN
      FOR all_employees IN
      (SELECT EMPLOYEE_ID
      FROM HRIS_EMPLOYEES
      WHERE RETIRED_FLAG ='N'
      AND STATUS         ='E'
      )
      LOOP
        IF birthday_employees.EMPLOYEE_ID = all_employees.EMPLOYEE_ID THEN
          HRIS_SYSTEM_NOTIFICATION(all_employees.EMPLOYEE_ID,SYSDATE,'Birthday','Happy Birthday '||birthday_employees.FULL_NAME||'. Have a nice day.' ,'{"route":"birthday","action":"wish","id":"'||birthday_employees.EMPLOYEE_ID||'"}');
        ELSE
          HRIS_SYSTEM_NOTIFICATION(all_employees.EMPLOYEE_ID,SYSDATE,'Birthday',birthday_employees.FULL_NAME||' has birthday today.','{"route":"birthday","action":"wish","id":"'||birthday_employees.EMPLOYEE_ID||'"}');
        END IF;
      END LOOP;
    END;
  END LOOP;
END;create or replace PROCEDURE HRIS_OVERTIME_AUTOMATION(
    V_DATE DATE)
AS
  S_OVERTIME_REQUEST VARCHAR(255 BYTE):= 'OVERTIME_REQUEST';
  V_ADMIN_ID HRIS_EMPLOYEES.EMPLOYEE_ID%TYPE;
  V_SHIFT_ID HRIS_SHIFTS.SHIFT_ID%TYPE;
  V_START_TIME HRIS_SHIFTS.START_TIME%TYPE;
  V_END_TIME HRIS_SHIFTS.END_TIME%TYPE;
  V_LATE_IN HRIS_SHIFTS.LATE_IN%TYPE;
  V_EARLY_OUT HRIS_SHIFTS.EARLY_OUT%TYPE;
  V_TOTAL_WORKING_HR HRIS_SHIFTS.TOTAL_WORKING_HR%TYPE;
  V_ACTUAL_WORKING_HR HRIS_SHIFTS.ACTUAL_WORKING_HR%TYPE;
  V_IN_TIME HRIS_ATTENDANCE_DETAIL.IN_TIME%TYPE;
  V_OUT_TIME HRIS_ATTENDANCE_DETAIL.OUT_TIME%TYPE;
  V_PUNCH_COUNT              NUMBER;
  V_NON_WORKING_HR           NUMBER;
  V_WORKING_HR               NUMBER;
  V_ACTUAL_WORKING_HR_IN_MIN NUMBER;
  V_TOTAL_WORKING_HR_IN_MIN  NUMBER;
  V_LATE_IN_MIN              NUMBER;
  V_EARLY_OUT_IN_MIN         NUMBER;
  V_BREAK_TIME_IN_MIN        NUMBER;
  V_NON_CONSIDERED_OVERTIME  NUMBER;
  V_OVERTIME                 NUMBER;
  V_CONSTRAINT_VAL_IN_MIN    NUMBER;
  V_PREF_CONDITION           CHAR(1 BYTE);
  V_OVERTIME_ID HRIS_OVERTIME.OVERTIME_ID%TYPE;
  V_OVERTIME_IN_HR          VARCHAR2(10 BYTE);
  V_COUNTER                 NUMBER:=1;
  V_PRE_OVERTIME            VARCHAR2(10 BYTE);
  V_PRE_OVERTIME_MIN        NUMBER;
  V_POST_OVERTIME           VARCHAR2(10 BYTE);
  V_POST_OVERTIME_MIN       NUMBER;
  V_OVERTIME_DETAIL_ID      NUMBER;
  V_EMP_OVERTIME_DATA_COUNT NUMBER;
BEGIN
  BEGIN
    SELECT EMPLOYEE_ID
    INTO V_ADMIN_ID
    FROM HRIS_EMPLOYEES
    WHERE IS_ADMIN  ='Y'
    AND STATUS      ='E'
    AND RETIRED_FLAG='N'
    AND ROWNUM      <2 ;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20001, 'NO EMPLOYEE IS DEFINED AS ADMIN');
  END;
  DECLARE
    V_PREF_COUNTER           NUMBER:=0;
    NO_PREFERENCE_DATA_FOUND EXCEPTION;
  BEGIN
    FOR CUR_PREF IN
    (SELECT       *
    FROM HRIS_PREFERENCE_SETUP
    WHERE PREFERENCE_NAME=S_OVERTIME_REQUEST
    AND STATUS           ='E'
    )
    LOOP
      DECLARE
        V_EMPLOYEE_COUNTER     NUMBER:=0;
        NO_EMPLOYEE_DATA_FOUND EXCEPTION;
      BEGIN
        FOR CUR_EMP IN
        (SELECT E.EMPLOYEE_ID AS EMPLOYEE_ID,
          S.START_TIME        AS START_TIME,
          S.END_TIME          AS END_TIME,
          S.LATE_IN           AS LATE_IN ,
          S.EARLY_OUT         AS EARLY_OUT,
          S.TOTAL_WORKING_HR  AS TOTAL_WORKING_HR,
          S.ACTUAL_WORKING_HR AS ACTUAL_WORKING_HR,
          S.SHIFT_ID          AS SHIFT_ID,
          AD.IN_TIME          AS IN_TIME,
          AD.OUT_TIME         AS OUT_TIME
        FROM HRIS_EMPLOYEES E
        JOIN
          (SELECT * FROM HRIS_EMPLOYEE_SHIFT_ASSIGN WHERE STATUS='E'
          ) SA
        ON (E.EMPLOYEE_ID =SA.EMPLOYEE_ID)
        LEFT JOIN
          (SELECT * FROM HRIS_SHIFTS WHERE STATUS='E'
          ) S
        ON (S.SHIFT_ID=SA.SHIFT_ID)
        LEFT JOIN HRIS_ATTENDANCE_DETAIL AD
        ON (E.EMPLOYEE_ID =AD.EMPLOYEE_ID)
        WHERE (V_DATE BETWEEN S.START_DATE AND S.END_DATE)
        AND AD.ATTENDANCE_DT = V_DATE
        AND E.STATUS         = 'E'
        AND E.RETIRED_FLAG   ='N'
        AND E.EMPLOYEE_TYPE  = CUR_PREF.EMPLOYEE_TYPE
        )
        LOOP
          BEGIN
            V_SHIFT_ID          := CUR_EMP.SHIFT_ID;
            V_START_TIME        := CUR_EMP.START_TIME;
            V_END_TIME          :=CUR_EMP.END_TIME;
            V_LATE_IN           :=CUR_EMP.LATE_IN;
            V_EARLY_OUT         :=CUR_EMP.EARLY_OUT;
            V_TOTAL_WORKING_HR  := CUR_EMP.TOTAL_WORKING_HR;
            V_ACTUAL_WORKING_HR :=CUR_EMP.ACTUAL_WORKING_HR;
            V_IN_TIME           := CUR_EMP.IN_TIME;
            V_OUT_TIME          :=CUR_EMP.OUT_TIME;
            IF CUR_EMP.SHIFT_ID IS NULL THEN
              BEGIN
                SELECT SHIFT_ID ,
                  START_TIME,
                  END_TIME,
                  NVL(LATE_IN,0),
                  NVL(EARLY_OUT,0),
                  NVL(TOTAL_WORKING_HR,0),
                  NVL(ACTUAL_WORKING_HR,0)
                INTO V_SHIFT_ID,
                  V_START_TIME,
                  V_END_TIME,
                  V_LATE_IN,
                  V_EARLY_OUT,
                  V_TOTAL_WORKING_HR,
                  V_ACTUAL_WORKING_HR
                FROM HRIS_SHIFTS
                WHERE STATUS     ='E'
                AND DEFAULT_SHIFT='Y'
                AND ROWNUM       <2;
              EXCEPTION
              WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(-20344, 'NO DEFAULT IS FOUND');
              END;
            END IF;
            --
            BEGIN
              SELECT COUNT(EMPLOYEE_ID)
              INTO V_EMP_OVERTIME_DATA_COUNT
              FROM HRIS_OVERTIME
              WHERE EMPLOYEE_ID            = CUR_EMP.EMPLOYEE_ID
              AND OVERTIME_DATE            =V_DATE;
              IF V_EMP_OVERTIME_DATA_COUNT =0 THEN
                --
                BEGIN
                  SELECT COUNT(*)
                  INTO V_PUNCH_COUNT
                  FROM HRIS_ATTENDANCE
                  WHERE EMPLOYEE_ID = CUR_EMP.EMPLOYEE_ID
                  AND ATTENDANCE_DT =V_DATE;
                  IF V_PUNCH_COUNT !=0 AND MOD(V_PUNCH_COUNT,2)=0 THEN
                    --
                    BEGIN
                      FOR CUR_OVERTIME       IN
                      (SELECT TRUNC(TOTAL_MINS/60,0)
                        ||':'
                        ||MOD(TOTAL_MINS,60) TOTAL_HRS,
                        TOTAL_MINS,
                        HR_TYPE
                      FROM
                        (SELECT
                          CASE MOD(RNUM,2)
                            WHEN 0
                            THEN 'WORKING'
                            ELSE 'NON-WORKING'
                          END AS HR_TYPE,
                          SUM(ABS(EXTRACT( HOUR FROM DIFF ))*60 + ABS(EXTRACT( MINUTE FROM DIFF ))) TOTAL_MINS
                        FROM
                          (SELECT ROW_NUMBER() OVER ( ORDER BY A.ATTENDANCE_TIME )    AS RNUM,
                            MOD((ROW_NUMBER() OVER ( ORDER BY A.ATTENDANCE_TIME )),2) AS NUM,
                            A.EMPLOYEE_ID,
                            A.IP_ADDRESS,
                            A.ATTENDANCE_DT,
                            A.ATTENDANCE_TIME,
                            (A.ATTENDANCE_TIME - LAG(A.ATTENDANCE_TIME) OVER (ORDER BY A.ATTENDANCE_TIME)) AS DIFF
                          FROM HRIS_ATTENDANCE A
                          WHERE A.EMPLOYEE_ID = CUR_EMP.EMPLOYEE_ID
                          AND A.ATTENDANCE_DT = V_DATE
                          )
                        GROUP BY MOD(RNUM,2)
                        )
                      )
                      LOOP
                        IF V_COUNTER       = 1 THEN
                          V_NON_WORKING_HR:=NVL(CUR_OVERTIME.TOTAL_MINS,0);
                        ELSE
                          V_WORKING_HR:=NVL(CUR_OVERTIME.TOTAL_MINS,0);
                        END IF;
                        -- NO EXCEPTION HANDLED HERE YET;
                        V_COUNTER:=V_COUNTER+1;
                      END LOOP;
                    END;
                    IF V_COUNTER != 3 THEN
                      CONTINUE;
                    END IF;
                    V_COUNTER:=1;
                    --
                    V_BREAK_TIME_IN_MIN          := (V_TOTAL_WORKING_HR-V_ACTUAL_WORKING_HR);
                    IF V_WORKING_HR               > V_ACTUAL_WORKING_HR THEN
                      IF V_BREAK_TIME_IN_MIN      > V_NON_WORKING_HR THEN
                        V_NON_CONSIDERED_OVERTIME:=(V_BREAK_TIME_IN_MIN - V_NON_WORKING_HR);
                      ELSE
                        V_NON_CONSIDERED_OVERTIME:=0;
                      END IF;
                      V_OVERTIME := ( V_WORKING_HR -V_ACTUAL_WORKING_HR)-V_NON_CONSIDERED_OVERTIME;
                      --                V_OVERTIME      :=V_OVERTIME      +NVL(V_LATE_IN_MIN,0)+NVL(V_EARLY_OUT_IN_MIN,0);
                      V_PREF_CONDITION:=
                      CASE
                      WHEN ((CUR_PREF.PREFERENCE_CONDITION = 'LESS_THAN') AND (V_OVERTIME <CUR_PREF.CONSTRAINT_VALUE)) OR ((CUR_PREF.PREFERENCE_CONDITION = 'GREATER_THAN') AND (V_OVERTIME >CUR_PREF.CONSTRAINT_VALUE)) OR ((CUR_PREF.PREFERENCE_CONDITION = 'EQUAL') AND (V_OVERTIME =CUR_PREF.CONSTRAINT_VALUE)) THEN
                        'Y'
                      ELSE
                        'N'
                      END;
                      IF V_PREF_CONDITION = 'Y' THEN
                        SELECT NVL(MAX (OVERTIME_ID),0) + 1 INTO V_OVERTIME_ID FROM HRIS_OVERTIME;
                        DBMS_OUTPUT.PUT_LINE(''||V_OVERTIME);
                        SELECT CONCAT( TRUNC(V_OVERTIME/60,0), CONCAT(':',MOD(V_OVERTIME,60)))
                        INTO V_OVERTIME_IN_HR
                        FROM DUAL;
                        INSERT
                        INTO HRIS_OVERTIME
                          (
                            OVERTIME_ID,
                            EMPLOYEE_ID,
                            OVERTIME_DATE,
                            REQUESTED_DATE,
                            DESCRIPTION,
                            REMARKS,
                            STATUS,
                            RECOMMENDED_BY,
                            RECOMMENDED_DATE,
                            RECOMMENDED_REMARKS,
                            APPROVED_BY,
                            APPROVED_DATE,
                            APPROVED_REMARKS,
                            MODIFIED_DATE,
                            TOTAL_HOUR
                          )
                          VALUES
                          (
                            V_OVERTIME_ID ,
                            CUR_EMP.EMPLOYEE_ID,
                            V_DATE,
                            V_DATE,
                            'Overtime Request',
                            NULL,
                            CUR_PREF.REQUEST_TYPE,
                            (
                            CASE CUR_PREF.REQUEST_TYPE
                              WHEN 'AP'
                              THEN V_ADMIN_ID
                              ELSE NULL
                            END),
                            (
                            CASE CUR_PREF.REQUEST_TYPE
                              WHEN 'AP'
                              THEN V_DATE
                              ELSE NULL
                            END),
                            NULL,
                            (
                            CASE CUR_PREF.REQUEST_TYPE
                              WHEN 'AP'
                              THEN V_ADMIN_ID
                              ELSE NULL
                            END),
                            (
                            CASE CUR_PREF.REQUEST_TYPE
                              WHEN 'AP'
                              THEN V_DATE
                              ELSE NULL
                            END),
                            NULL,
                            NULL,
                            V_OVERTIME
                          );
                        COMMIT;
                        IF (V_IN_TIME != V_START_TIME) AND (V_IN_TIME < V_START_TIME) THEN
                          SELECT NVL(MAX (DETAIL_ID),0) + 1
                          INTO V_OVERTIME_DETAIL_ID
                          FROM HRIS_OVERTIME_DETAIL;
                          SELECT SUM(ABS(EXTRACT( HOUR FROM PRE_OVERTIME ))*60 + ABS(EXTRACT( MINUTE FROM PRE_OVERTIME )))
                          INTO V_PRE_OVERTIME_MIN
                          FROM
                            (SELECT (V_START_TIME-V_IN_TIME) AS PRE_OVERTIME FROM DUAL
                            );
                          SELECT CONCAT( TRUNC(V_PRE_OVERTIME_MIN/60,0), CONCAT(':',MOD(V_PRE_OVERTIME_MIN,60)))
                          INTO V_PRE_OVERTIME
                          FROM DUAL;
                          INSERT
                          INTO HRIS_OVERTIME_DETAIL
                            (
                              DETAIL_ID,
                              OVERTIME_ID,
                              START_TIME,
                              END_TIME,
                              STATUS,
                              CREATED_BY,
                              CREATED_DATE,
                              MODIFIED_BY,
                              MODIFIED_DATE,
                              TOTAL_HOUR
                            )
                            VALUES
                            (
                              V_OVERTIME_DETAIL_ID ,
                              V_OVERTIME_ID,
                              V_IN_TIME,
                              V_START_TIME,
                              'E',
                              CUR_EMP.EMPLOYEE_ID,
                              V_DATE,
                              NULL,
                              NULL,
                              V_PRE_OVERTIME_MIN
                            );
                          COMMIT;
                        END IF;
                        IF (V_OUT_TIME != V_END_TIME) AND (V_END_TIME < V_OUT_TIME) THEN
                          SELECT NVL(MAX (DETAIL_ID),0) + 1
                          INTO V_OVERTIME_DETAIL_ID
                          FROM HRIS_OVERTIME_DETAIL;
                          SELECT SUM(ABS(EXTRACT( HOUR FROM POST_OVERTIME ))*60 + ABS(EXTRACT( MINUTE FROM POST_OVERTIME )))
                          INTO V_POST_OVERTIME_MIN
                          FROM
                            (SELECT (V_OUT_TIME-V_END_TIME) AS POST_OVERTIME FROM DUAL
                            );
                          SELECT CONCAT( TRUNC(V_POST_OVERTIME_MIN/60,0), CONCAT(':',MOD(V_POST_OVERTIME_MIN,60)))
                          INTO V_POST_OVERTIME
                          FROM DUAL;
                          INSERT
                          INTO HRIS_OVERTIME_DETAIL
                            (
                              DETAIL_ID,
                              OVERTIME_ID,
                              START_TIME,
                              END_TIME,
                              STATUS,
                              CREATED_BY,
                              CREATED_DATE,
                              MODIFIED_BY,
                              MODIFIED_DATE,
                              TOTAL_HOUR
                            )
                            VALUES
                            (
                              V_OVERTIME_DETAIL_ID ,
                              V_OVERTIME_ID,
                              V_END_TIME,
                              V_OUT_TIME,
                              'E',
                              CUR_EMP.EMPLOYEE_ID,
                              V_DATE,
                              NULL,
                              NULL,
                              V_POST_OVERTIME_MIN
                            );
                          COMMIT;
                        END IF;
                      END IF;
                    END IF;
                    --
                    --
                  END IF;
                END;
              END IF;
            END;
            V_EMPLOYEE_COUNTER:=V_EMPLOYEE_COUNTER+1;
          END;
        END LOOP;
        IF V_EMPLOYEE_COUNTER=0 THEN
          RAISE NO_EMPLOYEE_DATA_FOUND;
        END IF;
      EXCEPTION
      WHEN NO_EMPLOYEE_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20004,'FAILED ON PREFERENCE_ID : ' || CUR_PREF.PREFERENCE_ID || ' EMPLOYEE ARE NOT AVAILABLE WITH PROVIDED ATTENDANCE DATE ACCORDING TO SETUP');
      END;
      V_PREF_COUNTER:=V_PREF_COUNTER+1;
    END LOOP;
    IF V_PREF_COUNTER=0 THEN
      RAISE NO_PREFERENCE_DATA_FOUND;
    END IF;
  EXCEPTION
  WHEN NO_PREFERENCE_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20005, 'NO PREFERENCE SETTING IS DEFINED FOR OVERTIME AUTOMATION');
  END;
END HRIS_OVERTIME_AUTOMATION;create or replace PROCEDURE HRIS_POST_CHECK_ATTENDANCE(
    P_ATTENDANCE_DT DATE ,
    P_EMPLOYEE_ID   NUMBER:=NULL)
AS
  V_ATTENDANCE_DT DATE;
BEGIN
  V_ATTENDANCE_DT :=TRUNC(P_ATTENDANCE_DT);
  --
  HRIS_REATTENDANCE(V_ATTENDANCE_DT,P_EMPLOYEE_ID);
  --
  --
  IF V_ATTENDANCE_DT = TRUNC(SYSDATE) THEN
    --
    HRIS_COMPULSORY_OT_PROC(V_ATTENDANCE_DT);
    --
    FOR attendance IN
    (SELECT         *
    FROM HRIS_ATTENDANCE_DETAIL
    WHERE ATTENDANCE_DT= V_ATTENDANCE_DT
    AND (EMPLOYEE_ID   =
      CASE
        WHEN P_EMPLOYEE_ID IS NOT NULL
        THEN P_EMPLOYEE_ID
      END
    OR P_EMPLOYEE_ID IS NULL)
    )
    LOOP
      -- check if wod is present for every employee
      DECLARE
        V_ID HRIS_EMPLOYEE_WORK_DAYOFF.ID%TYPE;
      BEGIN
        SELECT ID
        INTO V_ID
        FROM HRIS_EMPLOYEE_WORK_DAYOFF
        WHERE EMPLOYEE_ID = attendance.EMPLOYEE_ID
        AND TO_DATE       = V_ATTENDANCE_DT-(
          CASE
            WHEN (attendance.TWO_DAY_SHIFT ='E')
            THEN 1
            ELSE 0
          END)
        AND STATUS ='AP'
        AND ROWNUM =1;
        --
        HRIS_WOD_REWARD(V_ID);
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT('NO WORK ON DAYOFF FOUND');
      END;
      -- check if woh is present for every employee
      DECLARE
        V_ID HRIS_EMPLOYEE_WORK_HOLIDAY.ID%TYPE;
      BEGIN
        SELECT ID
        INTO V_ID
        FROM HRIS_EMPLOYEE_WORK_HOLIDAY
        WHERE EMPLOYEE_ID =attendance.EMPLOYEE_ID
        AND TO_DATE       = V_ATTENDANCE_DT-(
          CASE
            WHEN (attendance.TWO_DAY_SHIFT ='E')
            THEN 1
            ELSE 0
          END)
        AND STATUS = 'AP'
        AND ROWNUM =1;
        --
        HRIS_WOH_REWARD(V_ID);
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT('NO WORK ON DAYOFF FOUND');
      END;
    END LOOP;
  END IF;
END;create or replace PROCEDURE HRIS_PRELOAD_ATTENDANCE(
    V_ATTENDANCE_DATE DATE,
    P_EMPLOYEE_ID HRIS_EMPLOYEES.EMPLOYEE_ID%TYPE:=NULL,
    P_SHIFT_ID HRIS_SHIFTS.SHIFT_ID%TYPE         :=NULL)
AS
  V_EMPLOYEE_ID HRIS_EMPLOYEES.EMPLOYEE_ID%TYPE;
  V_SHIFT_ID HRIS_SHIFTS.SHIFT_ID%TYPE;
  V_WEEKDAY1 HRIS_SHIFTS.WEEKDAY1%TYPE;
  V_WEEKDAY2 HRIS_SHIFTS.WEEKDAY2%TYPE;
  V_WEEKDAY3 HRIS_SHIFTS.WEEKDAY3%TYPE;
  V_WEEKDAY4 HRIS_SHIFTS.WEEKDAY4%TYPE;
  V_WEEKDAY5 HRIS_SHIFTS.WEEKDAY5%TYPE;
  V_WEEKDAY6 HRIS_SHIFTS.WEEKDAY6%TYPE;
  V_WEEKDAY7 HRIS_SHIFTS.WEEKDAY7%TYPE;
  V_DAYOFF  VARCHAR2(1 BYTE);
  V_HALFDAY CHAR(1 BYTE);
  V_HOLIDAY_ID HRIS_HOLIDAY_MASTER_SETUP.HOLIDAY_ID%TYPE;
  V_LEAVE_ID HRIS_LEAVE_MASTER_SETUP.LEAVE_ID%TYPE;
  V_LEAVE_HALFDAY_PERIOD HRIS_EMPLOYEE_LEAVE_REQUEST.HALF_DAY%TYPE;
  V_LEAVE_GRACE_PERIOD HRIS_EMPLOYEE_LEAVE_REQUEST.GRACE_PERIOD%TYPE;
  V_TRAVEL_ID HRIS_EMPLOYEE_TRAVEL_REQUEST.TRAVEL_ID%TYPE;
  V_TRAINING_ID HRIS_TRAINING_MASTER_SETUP.TRAINING_ID%TYPE;
  V_WOD_ID HRIS_EMPLOYEE_WORK_DAYOFF.ID%TYPE;
  V_WOH_ID HRIS_EMPLOYEE_WORK_HOLIDAY.ID%TYPE;
  V_TWO_DAY_SHIFT HRIS_SHIFTS.TWO_DAY_SHIFT%TYPE;
  V_MAX_ID                NUMBER;
  V_ATTENDANCE_DATA_COUNT NUMBER;
  CURSOR CUR_EMPLOYEE
  IS
    SELECT EMPLOYEE_ID
    FROM HRIS_EMPLOYEES
    WHERE STATUS     ='E'
    AND RETIRED_FLAG ='N'
    AND IS_ADMIN     ='N'
    AND (EMPLOYEE_ID =
      CASE
        WHEN P_EMPLOYEE_ID IS NOT NULL
        THEN P_EMPLOYEE_ID
      END
    OR P_EMPLOYEE_ID IS NULL);
  --
  V_OVERALL_STATUS CHAR(2 BYTE);
BEGIN
  --
  OPEN CUR_EMPLOYEE;
  LOOP
    FETCH CUR_EMPLOYEE INTO V_EMPLOYEE_ID;
    EXIT
  WHEN CUR_EMPLOYEE%NOTFOUND;
    -- RESET VALUES FOR EACH LOOP
    V_DAYOFF              :='N';
    V_HALFDAY             :='N';
    V_HOLIDAY_ID          :=NULL;
    V_LEAVE_ID            :=NULL;
    V_TRAINING_ID         :=NULL;
    V_TRAVEL_ID           :=NULL;
    V_OVERALL_STATUS      :=NULL;
    V_LEAVE_HALFDAY_PERIOD:=NULL;
    V_LEAVE_GRACE_PERIOD  :=NULL;
    --
    -- CHECK IF ALREADY LOADED ATTENDANCE DATA FOR THIS EMPLOYEE_ID
    SELECT COUNT (EMPLOYEE_ID)
    INTO V_ATTENDANCE_DATA_COUNT
    FROM HRIS_ATTENDANCE_DETAIL
    WHERE EMPLOYEE_ID          = V_EMPLOYEE_ID
    AND ATTENDANCE_DT          = V_ATTENDANCE_DATE;
    IF V_ATTENDANCE_DATA_COUNT > 0 THEN
      CONTINUE;
    END IF;
    --
    IF P_SHIFT_ID IS NOT NULL THEN
      --    FETCH SHIFT DATA IF PASSED
      BEGIN
        SELECT HS.SHIFT_ID,
          WEEKDAY1,
          WEEKDAY2,
          WEEKDAY3,
          WEEKDAY4,
          WEEKDAY5,
          WEEKDAY6,
          WEEKDAY7,
          TWO_DAY_SHIFT
        INTO V_SHIFT_ID,
          V_WEEKDAY1,
          V_WEEKDAY2,
          V_WEEKDAY3,
          V_WEEKDAY4,
          V_WEEKDAY5,
          V_WEEKDAY6,
          V_WEEKDAY7,
          V_TWO_DAY_SHIFT
        FROM HRIS_SHIFTS HS
        WHERE HS.SHIFT_ID = P_SHIFT_ID ;
      END;
      --
    ELSE
      BEGIN
        SELECT HS.SHIFT_ID,
          WEEKDAY1,
          WEEKDAY2,
          WEEKDAY3,
          WEEKDAY4,
          WEEKDAY5,
          WEEKDAY6,
          WEEKDAY7,
          TWO_DAY_SHIFT
        INTO V_SHIFT_ID,
          V_WEEKDAY1,
          V_WEEKDAY2,
          V_WEEKDAY3,
          V_WEEKDAY4,
          V_WEEKDAY5,
          V_WEEKDAY6,
          V_WEEKDAY7,
          V_TWO_DAY_SHIFT
        FROM HRIS_EMPLOYEE_SHIFT_ROASTER ES,
          HRIS_SHIFTS HS
        WHERE 1                = 1
        AND ES.EMPLOYEE_ID     = V_EMPLOYEE_ID
        AND TRUNC(ES.FOR_DATE) = V_ATTENDANCE_DATE
        AND HS.STATUS          = 'E'
        AND ES.SHIFT_ID        = HS.SHIFT_ID;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        BEGIN
          SELECT HS.SHIFT_ID,
            WEEKDAY1,
            WEEKDAY2,
            WEEKDAY3,
            WEEKDAY4,
            WEEKDAY5,
            WEEKDAY6,
            WEEKDAY7,
            TWO_DAY_SHIFT
          INTO V_SHIFT_ID,
            V_WEEKDAY1,
            V_WEEKDAY2,
            V_WEEKDAY3,
            V_WEEKDAY4,
            V_WEEKDAY5,
            V_WEEKDAY6,
            V_WEEKDAY7,
            V_TWO_DAY_SHIFT
          FROM
            (SELECT *
            FROM
              (SELECT *
              FROM HRIS_EMPLOYEE_SHIFT_ASSIGN
              WHERE EMPLOYEE_ID              = V_EMPLOYEE_ID
              AND (TRUNC(V_ATTENDANCE_DATE) >= START_DATE
              AND TRUNC(V_ATTENDANCE_DATE)  <=
                CASE
                  WHEN END_DATE IS NOT NULL
                  THEN END_DATE
                  ELSE TRUNC(V_ATTENDANCE_DATE)
                END)
              ORDER BY START_DATE DESC,
                END_DATE ASC
              )
            WHERE ROWNUM=1
            ) ES,
            HRIS_SHIFTS HS
          WHERE ES.SHIFT_ID = HS.SHIFT_ID;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          BEGIN
            SELECT SHIFT_ID,
              WEEKDAY1,
              WEEKDAY2,
              WEEKDAY3,
              WEEKDAY4,
              WEEKDAY5,
              WEEKDAY6,
              WEEKDAY7,
              TWO_DAY_SHIFT
            INTO V_SHIFT_ID,
              V_WEEKDAY1,
              V_WEEKDAY2,
              V_WEEKDAY3,
              V_WEEKDAY4,
              V_WEEKDAY5,
              V_WEEKDAY6,
              V_WEEKDAY7,
              V_TWO_DAY_SHIFT
            FROM HRIS_SHIFTS
            WHERE V_ATTENDANCE_DATE BETWEEN START_DATE AND END_DATE
            AND DEFAULT_SHIFT = 'Y'
            AND STATUS        ='E'
            AND ROWNUM        =1 ;
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20344, 'No default and normal shift defined for this time period');
          END;
        END;
      END;
    END IF;
    SELECT NVL(MAX (ID),0) + 1 INTO V_MAX_ID FROM HRIS_ATTENDANCE_DETAIL;
    BEGIN
      IF (TO_CHAR(V_ATTENDANCE_DATE,'D') ='1') THEN
        IF V_WEEKDAY1                    = 'DAY_OFF' THEN
          V_DAYOFF                      := 'Y';
        ELSIF V_WEEKDAY1                 ='H' THEN
          V_HALFDAY                     := 'Y';
        END IF;
      ELSIF (TO_CHAR(V_ATTENDANCE_DATE,'D') ='2') THEN
        IF V_WEEKDAY2                       = 'DAY_OFF' THEN
          V_DAYOFF                         := 'Y';
        ELSIF V_WEEKDAY2                    ='H' THEN
          V_HALFDAY                        := 'Y';
        END IF;
      ELSIF (TO_CHAR(V_ATTENDANCE_DATE,'D') ='3') THEN
        IF V_WEEKDAY3                       = 'DAY_OFF' THEN
          V_DAYOFF                         := 'Y';
        ELSIF V_WEEKDAY3                    ='H' THEN
          V_HALFDAY                        := 'Y';
        END IF;
      ELSIF (TO_CHAR(V_ATTENDANCE_DATE,'D') ='4') THEN
        IF V_WEEKDAY4                       = 'DAY_OFF' THEN
          V_DAYOFF                         := 'Y';
        ELSIF V_WEEKDAY4                    ='H' THEN
          V_HALFDAY                        := 'Y';
        END IF;
      ELSIF (TO_CHAR(V_ATTENDANCE_DATE,'D') ='5') THEN
        IF V_WEEKDAY5                       = 'DAY_OFF' THEN
          V_DAYOFF                         := 'Y';
        ELSIF V_WEEKDAY5                    ='H' THEN
          V_HALFDAY                        := 'Y';
        END IF;
      ELSIF (TO_CHAR(V_ATTENDANCE_DATE,'D') ='6') THEN
        IF V_WEEKDAY6                       = 'DAY_OFF' THEN
          V_DAYOFF                         := 'Y';
        ELSIF V_WEEKDAY6                    ='H' THEN
          V_HALFDAY                        := 'Y';
        END IF;
      ELSIF (TO_CHAR(V_ATTENDANCE_DATE,'D') ='7') THEN
        IF V_WEEKDAY7                       = 'DAY_OFF' THEN
          V_DAYOFF                         := 'Y';
        ELSIF V_WEEKDAY7                    ='H' THEN
          V_HALFDAY                        := 'Y';
        END IF;
      END IF;
      IF (V_DAYOFF       ='Y') THEN
        V_OVERALL_STATUS:='DO';
      END IF;
      IF (V_HALFDAY      ='Y') THEN
        V_OVERALL_STATUS:='AB';
        --        NOT DEFINED IN SETUP SO DEFAULT IS FIRST HALF
        V_LEAVE_HALFDAY_PERIOD:='F';
        --
      END IF;
    END;
    -- CHECK FOR HOLIDAY
    BEGIN
      SELECT H.HOLIDAY_ID
      INTO V_HOLIDAY_ID
      FROM HRIS_HOLIDAY_MASTER_SETUP H
      JOIN HRIS_EMPLOYEE_HOLIDAY EH
      ON (H.HOLIDAY_ID=EH.HOLIDAY_ID)
      WHERE V_ATTENDANCE_DATE BETWEEN H.START_DATE AND H.END_DATE
      AND EH.EMPLOYEE_ID  =V_EMPLOYEE_ID
      AND ROWNUM          <2;
      IF V_HOLIDAY_ID    IS NOT NULL THEN
        V_OVERALL_STATUS :='HD';
      END IF;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULL;
    END;
    --
    IF V_DAYOFF !='Y' THEN
      BEGIN
        SELECT LEAVE_ID,
          HALF_DAY,
          GRACE_PERIOD
        INTO V_LEAVE_ID,
          V_LEAVE_HALFDAY_PERIOD,
          V_LEAVE_GRACE_PERIOD
        FROM
          (SELECT L.LEAVE_ID,
            (
            CASE
              WHEN L.HALF_DAY IS NULL
              OR L.HALF_DAY    = 'N'
              THEN NULL
              ELSE L.HALF_DAY
            END ) AS HALF_DAY ,
            L.GRACE_PERIOD
          FROM HRIS_EMPLOYEE_LEAVE_REQUEST L
          WHERE L.EMPLOYEE_ID = V_EMPLOYEE_ID
          AND V_ATTENDANCE_DATE BETWEEN L.START_DATE AND L.END_DATE
          AND L.STATUS = 'AP'
          ORDER BY L.REQUESTED_DT DESC
          )
        WHERE ROWNUM        =1;
        IF V_LEAVE_ID      IS NOT NULL AND V_LEAVE_HALFDAY_PERIOD IS NULL AND V_LEAVE_GRACE_PERIOD IS NULL THEN
          V_OVERALL_STATUS :='LV';
        END IF;
        IF V_LEAVE_HALFDAY_PERIOD IS NOT NULL THEN
          V_HALFDAY               := 'Y';
        END IF;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      END;
    END IF;
    BEGIN
      SELECT TA.TRAINING_ID
      INTO V_TRAINING_ID
      FROM HRIS_EMPLOYEE_TRAINING_ASSIGN TA
      INNER JOIN HRIS_TRAINING_MASTER_SETUP T
      ON TA.TRAINING_ID       = T.TRAINING_ID
      WHERE TA.EMPLOYEE_ID    = V_EMPLOYEE_ID
      AND TA.STATUS           = 'E'
      AND T.IS_WITHIN_COMPANY ='N'
      AND V_ATTENDANCE_DATE BETWEEN T.START_DATE AND T.END_DATE;
      IF V_TRAINING_ID  IS NOT NULL THEN
        V_OVERALL_STATUS:='TN';
      END IF;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULL;
    END;
    BEGIN
      SELECT TRAVEL_ID
      INTO V_TRAVEL_ID
      FROM HRIS_EMPLOYEE_TRAVEL_REQUEST
      WHERE EMPLOYEE_ID = V_EMPLOYEE_ID
      AND STATUS        = 'AP'
      AND (V_ATTENDANCE_DATE BETWEEN FROM_DATE AND TO_DATE)
      AND ROWNUM          =1;
      IF V_TRAVEL_ID     IS NOT NULL THEN
        V_OVERALL_STATUS := 'TV';
      END IF;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULL;
    END;
    -- CHECK FOR WOD
    BEGIN
      SELECT ID
      INTO V_WOD_ID
      FROM
        (SELECT ID
        FROM HRIS_EMPLOYEE_WORK_DAYOFF
        WHERE EMPLOYEE_ID = V_EMPLOYEE_ID
        AND (V_ATTENDANCE_DATE BETWEEN FROM_DATE AND TO_DATE )
        AND STATUS ='AP'
        ORDER BY REQUESTED_DATE DESC
        )
      WHERE ROWNUM      =1 ;
      V_OVERALL_STATUS :=
      CASE
      WHEN V_OVERALL_STATUS ='TV' THEN
        'VP'
      ELSE
        'WD'
      END;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULL;
    END;
    --
    -- CHECK OF WOH
    BEGIN
      SELECT ID
      INTO V_WOH_ID
      FROM
        (SELECT ID
        FROM HRIS_EMPLOYEE_WORK_HOLIDAY
        WHERE EMPLOYEE_ID =V_EMPLOYEE_ID
        AND (V_ATTENDANCE_DATE BETWEEN FROM_DATE AND TO_DATE )
        AND STATUS ='AP'
        ORDER BY REQUESTED_DATE DESC
        )
      WHERE ROWNUM      =1 ;
      V_OVERALL_STATUS :=
      CASE
      WHEN V_OVERALL_STATUS ='TV' THEN
        'VP'
      ELSE
        'WH'
      END;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULL;
    END;
    --
    BEGIN
      INSERT
      INTO HRIS_ATTENDANCE_DETAIL
        (
          ID,
          EMPLOYEE_ID,
          ATTENDANCE_DT,
          SHIFT_ID,
          DAYOFF_FLAG,
          HALFDAY_FLAG,
          HALFDAY_PERIOD,
          GRACE_PERIOD,
          HOLIDAY_ID,
          LEAVE_ID,
          TRAVEL_ID,
          TRAINING_ID,
          OVERALL_STATUS,
          TWO_DAY_SHIFT
        )
        VALUES
        (
          V_MAX_ID,
          V_EMPLOYEE_ID,
          V_ATTENDANCE_DATE,
          V_SHIFT_ID,
          V_DAYOFF,
          V_HALFDAY,
          V_LEAVE_HALFDAY_PERIOD,
          V_LEAVE_GRACE_PERIOD,
          V_HOLIDAY_ID,
          V_LEAVE_ID,
          V_TRAVEL_ID,
          V_TRAINING_ID,
          (
          CASE
            WHEN V_OVERALL_STATUS IS NULL
            THEN 'AB'
            ELSE V_OVERALL_STATUS
          END),
          (
          CASE
            WHEN V_TWO_DAY_SHIFT IS NULL
            THEN 'D'
            ELSE V_TWO_DAY_SHIFT
          END)
        );
      COMMIT;
    END;
  END LOOP;
  CLOSE CUR_EMPLOYEE;
END;create or replace PROCEDURE HRIS_REATTENDANCE(
    P_FROM_ATTENDANCE_DT HRIS_ATTENDANCE.ATTENDANCE_DT%TYPE,
    P_EMPLOYEE_ID HRIS_ATTENDANCE.EMPLOYEE_ID%TYPE:=NULL )
AS
  V_DATE_DIFF NUMBER:= TRUNC(SYSDATE)- TRUNC(P_FROM_ATTENDANCE_DT);
  --
  V_EMPLOYEE_ID HRIS_EMPLOYEES.EMPLOYEE_ID%TYPE;
  V_IN_TIME HRIS_ATTENDANCE_DETAIL.IN_TIME%TYPE;
  V_OUT_TIME HRIS_ATTENDANCE_DETAIL.OUT_TIME%TYPE;
  V_DIFF_IN_MIN NUMBER;
  --
  V_OVERALL_STATUS HRIS_ATTENDANCE_DETAIL.OVERALL_STATUS%TYPE;
  V_LATE_STATUS HRIS_ATTENDANCE_DETAIL.LATE_STATUS%TYPE:='N';
  V_HALFDAY_FLAG HRIS_ATTENDANCE_DETAIL.HALFDAY_FLAG%TYPE;
  V_HALFDAY_PERIOD HRIS_ATTENDANCE_DETAIL.HALFDAY_PERIOD%TYPE;
  V_GRACE_PERIOD HRIS_ATTENDANCE_DETAIL.GRACE_PERIOD%TYPE;
  V_TWO_DAY_SHIFT HRIS_ATTENDANCE_DETAIL.TWO_DAY_SHIFT%TYPE;
  --
  V_FROM_DATE DATE;
  V_TO_DATE   DATE;
  --
  V_LATE_IN HRIS_SHIFTS.LATE_IN%TYPE;
  V_EARLY_OUT HRIS_SHIFTS.EARLY_OUT%TYPE;
  V_LATE_START_TIME TIMESTAMP;
  V_EARLY_END_TIME  TIMESTAMP;
  V_ADJUSTED_START_TIME HRIS_SHIFT_ADJUSTMENT.START_TIME%TYPE:=NULL;
  V_ADJUSTED_END_TIME HRIS_SHIFT_ADJUSTMENT.END_TIME%TYPE    :=NULL;
  --
  V_LATE_COUNT NUMBER;
  V_SHIFT_ID   NUMBER;
BEGIN
  FOR i IN 0..V_DATE_DIFF
  LOOP
    BEGIN
      SELECT FROM_DATE,
        TO_DATE
      INTO V_FROM_DATE,
        V_TO_DATE
      FROM HRIS_MONTH_CODE
      WHERE TRUNC(P_FROM_ATTENDANCE_DT+i) BETWEEN TRUNC(FROM_DATE) AND TRUNC(TO_DATE);
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(-20344, 'NO MONTH_CODE FOUND FOR THE DATE');
    END;
    --
    DELETE
    FROM HRIS_ATTENDANCE_DETAIL
    WHERE ATTENDANCE_DT= TRUNC(P_FROM_ATTENDANCE_DT+i)
    AND (EMPLOYEE_ID   =
      CASE
        WHEN P_EMPLOYEE_ID IS NOT NULL
        THEN P_EMPLOYEE_ID
      END
    OR P_EMPLOYEE_ID IS NULL);
    HRIS_PRELOAD_ATTENDANCE(TRUNC(P_FROM_ATTENDANCE_DT+i),P_EMPLOYEE_ID);
    --
    FOR employee IN
    (SELECT       *
    FROM HRIS_ATTENDANCE_DETAIL
    WHERE ATTENDANCE_DT = TRUNC(P_FROM_ATTENDANCE_DT+i)
    AND (EMPLOYEE_ID    =
      CASE
        WHEN P_EMPLOYEE_ID IS NOT NULL
        THEN P_EMPLOYEE_ID
      END
    OR P_EMPLOYEE_ID IS NULL)
    )
    LOOP
      V_DIFF_IN_MIN    :=NULL;
      V_OVERALL_STATUS :=employee.OVERALL_STATUS;
      V_LATE_STATUS    :=employee.LATE_STATUS;
      V_HALFDAY_FLAG   :=employee.HALFDAY_FLAG;
      V_HALFDAY_PERIOD :=employee.HALFDAY_PERIOD;
      V_GRACE_PERIOD   :=employee.GRACE_PERIOD;
      V_TWO_DAY_SHIFT  := employee.TWO_DAY_SHIFT;
      V_SHIFT_ID       := employee.SHIFT_ID;
      --
      DELETE
      FROM HRIS_ATTENDANCE_DETAIL
      WHERE ATTENDANCE_DT= TRUNC(employee.ATTENDANCE_DT)
      AND EMPLOYEE_ID    = employee.EMPLOYEE_ID ;
      --
      V_SHIFT_ID    :=HRIS_BEST_CASE_SHIFT(employee.EMPLOYEE_ID,TRUNC(employee.ATTENDANCE_DT));
      IF(V_SHIFT_ID IS NULL)THEN
        V_SHIFT_ID  :=employee.SHIFT_ID;
      END IF;
      HRIS_PRELOAD_ATTENDANCE(employee.ATTENDANCE_DT,employee.EMPLOYEE_ID,V_SHIFT_ID);
      --
      IF V_TWO_DAY_SHIFT ='E' THEN
        HRIS_REATTENDANCE_TWO_DAY(employee.ATTENDANCE_DT,employee.EMPLOYEE_ID,V_SHIFT_ID,V_FROM_DATE,V_TO_DATE);
        CONTINUE;
      END IF;
      --
      SELECT MIN(TO_DATE(TO_CHAR(ATTENDANCE_TIME,'HH:MI AM'),'HH:MI AM')) AS IN_TIME,
        MAX(TO_DATE(TO_CHAR(ATTENDANCE_TIME,'HH:MI AM'),'HH:MI AM')) OUT_TIME
      INTO V_IN_TIME,
        V_OUT_TIME
      FROM HRIS_ATTENDANCE
      WHERE ATTENDANCE_DT =TRUNC(employee.ATTENDANCE_DT)
      AND EMPLOYEE_ID     = employee.EMPLOYEE_ID ;
      --
      IF V_IN_TIME IS NULL THEN
        CONTINUE;
      END IF ;
      --
      IF V_IN_TIME  = V_OUT_TIME THEN
        V_OUT_TIME := NULL;
      END IF;
      --
      IF V_OUT_TIME IS NOT NULL THEN
        SELECT SUM(ABS(EXTRACT( HOUR FROM DIFF ))*60 + ABS(EXTRACT( MINUTE FROM DIFF )))
        INTO V_DIFF_IN_MIN
        FROM
          (SELECT V_OUT_TIME -V_IN_TIME AS DIFF FROM DUAL
          ) ;
      END IF;
      --
      BEGIN
        IF V_HALFDAY_PERIOD IS NOT NULL THEN
          SELECT S.LATE_IN,
            S.EARLY_OUT,
            (
            CASE
              WHEN V_HALFDAY_PERIOD ='F'
              THEN S.HALF_DAY_IN_TIME
              ELSE S.START_TIME
            END )+((1/1440)*NVL(S.LATE_IN,0)),
            (
            CASE
              WHEN V_HALFDAY_PERIOD ='F'
              THEN S.END_TIME
              ELSE S.HALF_DAY_OUT_TIME
            END ) -((1/1440)*NVL(S.EARLY_OUT,0))
          INTO V_LATE_IN,
            V_EARLY_OUT,
            V_LATE_START_TIME,
            V_EARLY_END_TIME
          FROM HRIS_SHIFTS S
          WHERE S.SHIFT_ID    =V_SHIFT_ID ;
        ELSIF V_GRACE_PERIOD IS NOT NULL THEN
          SELECT S.LATE_IN,
            S.EARLY_OUT,
            (
            CASE
              WHEN V_GRACE_PERIOD ='E'
              THEN S.GRACE_START_TIME
              ELSE S.START_TIME
            END)+((1/1440)*NVL(S.LATE_IN,0)),
            (
            CASE
              WHEN V_GRACE_PERIOD ='E'
              THEN S.END_TIME
              ELSE S.GRACE_END_TIME
            END) -((1/1440)*NVL(S.EARLY_OUT,0))
          INTO V_LATE_IN,
            V_EARLY_OUT,
            V_LATE_START_TIME,
            V_EARLY_END_TIME
          FROM HRIS_SHIFTS S
          WHERE S.SHIFT_ID=V_SHIFT_ID ;
        ELSE
          SELECT S.LATE_IN,
            S.EARLY_OUT,
            S.START_TIME+((1/1440)*NVL(S.LATE_IN,0)),
            S.END_TIME  -((1/1440)*NVL(S.EARLY_OUT,0))
          INTO V_LATE_IN,
            V_EARLY_OUT,
            V_LATE_START_TIME,
            V_EARLY_END_TIME
          FROM HRIS_SHIFTS S
          WHERE S.SHIFT_ID=V_SHIFT_ID ;
        END IF;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20344, 'SHIFT WITH SHIFT_ID => '|| V_SHIFT_ID ||' NOT FOUND.');
      END;
      --   CHECK FOR ADJUSTED SHIFT
      BEGIN
        SELECT SA.START_TIME,
          SA.END_TIME
        INTO V_ADJUSTED_START_TIME,
          V_ADJUSTED_END_TIME
        FROM HRIS_SHIFT_ADJUSTMENT SA
        JOIN HRIS_EMPLOYEE_SHIFT_ADJUSTMENT ESA
        ON (SA.ADJUSTMENT_ID=ESA.ADJUSTMENT_ID)
        WHERE (TRUNC(employee.ATTENDANCE_DT) BETWEEN TRUNC(SA.ADJUSTMENT_START_DATE) AND TRUNC(SA.ADJUSTMENT_END_DATE) )
        AND ESA.EMPLOYEE_ID       =employee.EMPLOYEE_ID;
        IF(V_ADJUSTED_START_TIME IS NOT NULL) THEN
          V_LATE_START_TIME      :=V_ADJUSTED_START_TIME;
          V_LATE_START_TIME      := V_LATE_START_TIME+((1/1440)*NVL(V_LATE_IN,0));
        END IF;
        IF(V_ADJUSTED_END_TIME IS NOT NULL) THEN
          V_EARLY_END_TIME     :=V_ADJUSTED_END_TIME;
          V_EARLY_END_TIME     := V_EARLY_END_TIME -((1/1440)*NVL(V_EARLY_OUT,0));
        END IF;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO ADJUSTMENT FOUND FOR EMPLOYEE =>'|| employee.EMPLOYEE_ID || 'ON THE DATE'||employee.ATTENDANCE_DT);
      END;
      --      END FOR CHECK FOR ADJUSTED_SHIFT
      IF(V_OVERALL_STATUS     ='DO') THEN
        V_OVERALL_STATUS     :='WD';
      ELSIF (V_OVERALL_STATUS ='HD') THEN
        V_OVERALL_STATUS     :='WH';
      ELSIF (V_OVERALL_STATUS ='LV') THEN
        NULL;
      ELSIF (V_OVERALL_STATUS ='TV') THEN
        NULL;
      ELSIF (V_OVERALL_STATUS ='TN') THEN
        NULL;
      ELSIF(V_HALFDAY_FLAG   !='Y' AND V_HALFDAY_PERIOD IS NOT NULL) OR V_GRACE_PERIOD IS NOT NULL THEN
        V_OVERALL_STATUS     :='LP';
      ELSIF (V_OVERALL_STATUS = 'AB') THEN
        V_OVERALL_STATUS     :='PR';
      END IF;
      --
      IF V_OVERALL_STATUS ='PR' AND (V_LATE_START_TIME-TRUNC(V_LATE_START_TIME))<(V_IN_TIME-TRUNC(V_IN_TIME)) THEN
        V_LATE_STATUS    :='L';
      END IF;
      --
      DBMS_OUTPUT.PUT_LINE('SHIFT OUT TIME:'||TO_CHAR(V_EARLY_END_TIME,'DD-MON-YYYY HH:MI AM'));
      DBMS_OUTPUT.PUT_LINE('EMPLOYEE OUT TIME:'||TO_CHAR(V_OUT_TIME,'DD-MON-YYYY HH:MI AM'));
      IF V_OVERALL_STATUS ='PR' AND (V_EARLY_END_TIME-TRUNC(V_EARLY_END_TIME))>(V_OUT_TIME-TRUNC(V_OUT_TIME)) THEN
        IF (V_LATE_STATUS = 'L') THEN
          V_LATE_STATUS  :='B';
        ELSE
          V_LATE_STATUS :='E';
        END IF;
      END IF;
      --
      IF i                 <V_DATE_DIFF THEN
        IF V_IN_TIME      IS NOT NULL AND V_OUT_TIME IS NULL THEN
          IF V_LATE_STATUS ='L' THEN
            V_LATE_STATUS := 'Y';
          ELSE
            V_LATE_STATUS := 'X';
          END IF;
        END IF;
        --
        SELECT COUNT(*)
        INTO V_LATE_COUNT
        FROM HRIS_ATTENDANCE_DETAIL
        WHERE EMPLOYEE_ID = employee.EMPLOYEE_ID
        AND (ATTENDANCE_DT BETWEEN V_FROM_DATE AND employee.ATTENDANCE_DT )
        AND OVERALL_STATUS           IN ('PR','LA')
        AND LATE_STATUS              IN ('E','L','Y') ;
        IF V_LATE_STATUS             IN ('E','L','Y') THEN
          V_LATE_COUNT       := V_LATE_COUNT+1;
          IF V_LATE_COUNT    != 0 AND MOD(V_LATE_COUNT,4)=0 THEN
            V_OVERALL_STATUS := 'LA';
          END IF;
        END IF;
        --
        IF V_LATE_STATUS   ='B' AND V_OVERALL_STATUS='PR' THEN
          V_OVERALL_STATUS:='BA';
        END IF;
      END IF;
      --
      UPDATE HRIS_ATTENDANCE_DETAIL
      SET IN_TIME         = V_IN_TIME,
        OUT_TIME          =V_OUT_TIME,
        OVERALL_STATUS    = V_OVERALL_STATUS,
        LATE_STATUS       = V_LATE_STATUS,
        TOTAL_HOUR        = V_DIFF_IN_MIN
      WHERE ATTENDANCE_DT = TO_DATE (employee.ATTENDANCE_DT, 'DD-MON-YY')
      AND EMPLOYEE_ID     = employee.EMPLOYEE_ID;
      --
    END LOOP;
  END LOOP;
END;create or replace PROCEDURE HRIS_REATTENDANCE_TWO_DAY(
    P_ATTENDANCE_DT    DATE,
    P_EMPLOYEE_ID      NUMBER,
    P_SHIFT_ID         NUMBER,
    P_MONTH_START_DATE DATE,
    P_MONTH_END_DATE   DATE)
AS
  V_LATE_START_TIME TIMESTAMP;
  V_EARLY_END_TIME  TIMESTAMP;
  V_HALF_INTERVAL   DATE;
  v_NEXT_HALF_INTERVAL DATE;
  V_IN_TIME HRIS_ATTENDANCE_DETAIL.IN_TIME%TYPE;
  V_OUT_TIME HRIS_ATTENDANCE_DETAIL.OUT_TIME%TYPE;
  V_DIFF_IN_MIN NUMBER;
  V_OVERALL_STATUS HRIS_ATTENDANCE_DETAIL.OVERALL_STATUS%TYPE;
  V_LATE_STATUS HRIS_ATTENDANCE_DETAIL.LATE_STATUS%TYPE:='N';
  V_LATE_COUNT NUMBER;
BEGIN
  SELECT S.START_TIME+((1/1440)*NVL(S.LATE_IN,0)),
    S.END_TIME       -((1/1440)*NVL(S.EARLY_OUT,0))
  INTO V_LATE_START_TIME,
    V_EARLY_END_TIME
  FROM HRIS_SHIFTS S
  WHERE S.SHIFT_ID=P_SHIFT_ID ;
  --
  V_LATE_START_TIME := TO_DATE(TO_CHAR(P_ATTENDANCE_DT,'DD-MON-YYYY')||' '||TO_CHAR(V_LATE_START_TIME,'HH:MI AM'),'DD-MON-YYYY HH:MI AM');
  V_EARLY_END_TIME  := TO_DATE(TO_CHAR(P_ATTENDANCE_DT,'DD-MON-YYYY')||' '|| TO_CHAR(V_EARLY_END_TIME,'HH:MI AM'),'DD-MON-YYYY HH:MI AM');
  --
  SELECT V_EARLY_END_TIME + (V_LATE_START_TIME -V_EARLY_END_TIME)/2
  INTO V_HALF_INTERVAL
  FROM DUAL;
  V_NEXT_HALF_INTERVAL:=V_HALF_INTERVAL+1;
  --
  SELECT MIN(ATTENDANCE_TIME) AS IN_TIME,
    MAX(ATTENDANCE_TIME) OUT_TIME
  INTO V_IN_TIME,
    V_OUT_TIME
  FROM HRIS_ATTENDANCE
  WHERE (ATTENDANCE_TIME BETWEEN V_HALF_INTERVAL AND V_NEXT_HALF_INTERVAL)
  AND EMPLOYEE_ID = P_EMPLOYEE_ID ;
  --
  IF V_IN_TIME IS NULL THEN
    RETURN;
  END IF ;
  --
  IF V_IN_TIME  = V_OUT_TIME THEN
    V_OUT_TIME := NULL;
  END IF;
  --
  IF V_OUT_TIME IS NOT NULL THEN
    SELECT SUM(ABS(EXTRACT( HOUR FROM DIFF ))*60 + ABS(EXTRACT( MINUTE FROM DIFF )))
    INTO V_DIFF_IN_MIN
    FROM
      (SELECT V_OUT_TIME -V_IN_TIME AS DIFF FROM DUAL
      ) ;
  END IF;
  IF(V_OVERALL_STATUS     ='DO') THEN
    V_OVERALL_STATUS     :='WD';
  ELSIF (V_OVERALL_STATUS ='HD') THEN
    V_OVERALL_STATUS     :='WH';
  ELSIF (V_OVERALL_STATUS ='LV') THEN
    NULL;
  ELSIF (V_OVERALL_STATUS ='TV') THEN
    NULL;
  ELSIF (V_OVERALL_STATUS ='TN') THEN
    NULL;
  ELSE
    V_OVERALL_STATUS :='PR';
  END IF;
  --
  IF (V_LATE_START_TIME-TRUNC(V_LATE_START_TIME))<(V_IN_TIME-TRUNC(V_IN_TIME)) THEN
    V_LATE_STATUS                               :='L';
  END IF;
  --
  IF (V_EARLY_END_TIME-TRUNC(V_EARLY_END_TIME))>(V_OUT_TIME-TRUNC(V_OUT_TIME)) THEN
    IF (V_LATE_STATUS                          = 'L') THEN
      V_LATE_STATUS                           :='B';
    ELSE
      V_LATE_STATUS :='E';
    END IF;
  END IF;
  --
  IF V_IN_TIME      IS NOT NULL AND V_OUT_TIME IS NULL THEN
    IF V_LATE_STATUS ='L' THEN
      V_LATE_STATUS := 'Y';
    ELSE
      V_LATE_STATUS := 'X';
    END IF;
  END IF;
  --
  SELECT COUNT(*)
  INTO V_LATE_COUNT
  FROM HRIS_ATTENDANCE_DETAIL
  WHERE EMPLOYEE_ID = P_EMPLOYEE_ID
  AND (ATTENDANCE_DT BETWEEN P_MONTH_START_DATE AND P_ATTENDANCE_DT )
  AND OVERALL_STATUS           IN ('PR','LA')
  AND LATE_STATUS              IN ('E','L','Y') ;
  IF V_LATE_STATUS             IN ('E','L','Y') THEN
    V_LATE_COUNT       := V_LATE_COUNT+1;
    IF V_LATE_COUNT    != 0 AND MOD(V_LATE_COUNT,4)=0 THEN
      V_OVERALL_STATUS := 'LA';
    END IF;
  END IF;
  --
  IF V_LATE_STATUS   ='B' AND V_OVERALL_STATUS='PR' THEN
    V_OVERALL_STATUS:='BA';
  END IF;
  --
  UPDATE HRIS_ATTENDANCE_DETAIL
  SET IN_TIME         = V_IN_TIME,
    OUT_TIME          =V_OUT_TIME,
    OVERALL_STATUS    = V_OVERALL_STATUS,
    LATE_STATUS       = V_LATE_STATUS,
    TOTAL_HOUR        = V_DIFF_IN_MIN
  WHERE ATTENDANCE_DT = TRUNC(P_ATTENDANCE_DT)
  AND EMPLOYEE_ID     = P_EMPLOYEE_ID;
END;CREATE OR REPLACE PROCEDURE HRIS_RECALCULATE_LEAVE(
    P_EMPLOYEE_ID HRIS_ATTENDANCE.EMPLOYEE_ID%TYPE  :=NULL,
    P_LEAVE_ID HRIS_LEAVE_MASTER_SETUP.LEAVE_ID%TYPE:=NULL)
AS
  V_TOTAL_NO_OF_DAYS NUMBER;
  V_IS_ASSIGNED      CHAR(1 BYTE);
BEGIN
  FOR leave_addition IN
  (SELECT EMPLOYEE_ID,
    LEAVE_ID,
    SUM(NO_OF_DAYS) AS NO_OF_DAYS
  FROM HRIS_EMPLOYEE_LEAVE_ADDITION
  GROUP BY EMPLOYEE_ID,
    LEAVE_ID
  )
  LOOP
    SELECT (
      CASE
        WHEN COUNT(*)>0
        THEN 'Y'
        ELSE 'N'
      END)
    INTO V_IS_ASSIGNED
    FROM HRIS_EMPLOYEE_LEAVE_ASSIGN
    WHERE EMPLOYEE_ID = leave_addition.EMPLOYEE_ID
    AND LEAVE_ID      = leave_addition.LEAVE_ID;
    IF(V_IS_ASSIGNED  ='Y')THEN
      UPDATE HRIS_EMPLOYEE_LEAVE_ASSIGN
      SET TOTAL_DAYS   = leave_addition.NO_OF_DAYS
      WHERE EMPLOYEE_ID= leave_addition.EMPLOYEE_ID
      AND LEAVE_ID     = leave_addition.LEAVE_ID;
    ELSE
      INSERT
      INTO HRIS_EMPLOYEE_LEAVE_ASSIGN
        (
          EMPLOYEE_ID,
          LEAVE_ID,
          TOTAL_DAYS,
          BALANCE,
          CREATED_DT
        )
        VALUES
        (
          leave_addition.EMPLOYEE_ID,
          leave_addition.LEAVE_ID,
          leave_addition.NO_OF_DAYS,
          0,
          TRUNC(SYSDATE)
        );
    END IF;
  END LOOP;
  --
  FOR leave_assign IN
  (SELECT A.*
    FROM HRIS_EMPLOYEE_LEAVE_ASSIGN A
    JOIN HRIS_LEAVE_MASTER_SETUP L
    ON (A.LEAVE_ID     = L.LEAVE_ID)
    WHERE L.IS_MONTHLY = 'N'
    AND (A.EMPLOYEE_ID =
      CASE
        WHEN P_EMPLOYEE_ID IS NOT NULL
        THEN P_EMPLOYEE_ID
      END
    OR P_EMPLOYEE_ID IS NULL)
    AND (A.LEAVE_ID   =
      CASE
        WHEN P_LEAVE_ID IS NOT NULL
        THEN P_LEAVE_ID
      END
    OR P_LEAVE_ID IS NULL)
  )
  LOOP
    BEGIN
      SELECT SUM(R.NO_OF_DAYS/(
        CASE
          WHEN R.HALF_DAY IN ('F','S')
          THEN 2
          ELSE 1
        END)) AS TOTAL_NO_OF_DAYS
      INTO V_TOTAL_NO_OF_DAYS
      FROM HRIS_EMPLOYEE_LEAVE_REQUEST R
      WHERE R.STATUS    = 'AP'
      AND R.EMPLOYEE_ID = leave_assign.EMPLOYEE_ID
      AND R.LEAVE_ID    = leave_assign.LEAVE_ID
      GROUP BY R.EMPLOYEE_ID ,
        R.LEAVE_ID;
    EXCEPTION
    WHEN no_data_found THEN
      V_TOTAL_NO_OF_DAYS:=0;
    END;
    UPDATE HRIS_EMPLOYEE_LEAVE_ASSIGN
    SET BALANCE       = TOTAL_DAYS - V_TOTAL_NO_OF_DAYS
    WHERE EMPLOYEE_ID = leave_assign.EMPLOYEE_ID
    AND LEAVE_ID      = leave_assign.LEAVE_ID;
  END LOOP;
END;CREATE OR REPLACE PROCEDURE HRIS_RECALC_MONTHLY_LEAVES
AS
BEGIN
  UPDATE HRIS_EMPLOYEE_LEAVE_ASSIGN
  SET BALANCE     =TOTAL_DAYS
  WHERE LEAVE_ID IN
    (SELECT LEAVE_ID FROM HRIS_LEAVE_MASTER_SETUP WHERE IS_MONTHLY='Y'
    );
  FOR leave IN
  (SELECT R.EMPLOYEE_ID,
    R.LEAVE_ID,
    SUM(R.NO_OF_DAYS) AS TOTAL_NO_OF_DAYS
  FROM HRIS_EMPLOYEE_LEAVE_REQUEST R
  JOIN HRIS_LEAVE_MASTER_SETUP L
  ON (R.LEAVE_ID = L.LEAVE_ID),
    (SELECT *
    FROM HRIS_MONTH_CODE
    WHERE TRUNC(SYSDATE) BETWEEN FROM_DATE AND TO_DATE
    ) M
  WHERE R.STATUS   = 'AP'
  AND L.IS_MONTHLY = 'Y'
  AND R.START_DATE BETWEEN M.FROM_DATE AND M.TO_DATE
  GROUP BY R.EMPLOYEE_ID,
    R.LEAVE_ID
  )
  LOOP
    UPDATE HRIS_EMPLOYEE_LEAVE_ASSIGN
    SET BALANCE       = TOTAL_DAYS - leave.TOTAL_NO_OF_DAYS
    WHERE EMPLOYEE_ID = leave.EMPLOYEE_ID
    AND LEAVE_ID      = leave.LEAVE_ID;
  END LOOP;
END;CREATE OR REPLACE PROCEDURE HRIS_SHIFT_ADD(
    P_EMPLOYEE_ID HRIS_EMPLOYEE_SHIFT_ASSIGN.EMPLOYEE_ID%TYPE,
    P_SHIFT_ID HRIS_EMPLOYEE_SHIFT_ASSIGN.SHIFT_ID%TYPE,
    P_START_DATE HRIS_EMPLOYEE_SHIFT_ASSIGN.START_DATE%TYPE,
    P_END_DATE HRIS_EMPLOYEE_SHIFT_ASSIGN.END_DATE%TYPE,
    P_CREATED_BY HRIS_EMPLOYEE_SHIFT_ASSIGN.CREATED_BY%TYPE)
AS
  V_ID HRIS_EMPLOYEE_SHIFT_ASSIGN.ID%TYPE;
BEGIN
  SELECT NVL(MAX(ID),0) +1 INTO V_ID FROM HRIS_EMPLOYEE_SHIFT_ASSIGN;
  INSERT
  INTO HRIS_EMPLOYEE_SHIFT_ASSIGN
    (
      ID,
      EMPLOYEE_ID,
      SHIFT_ID,
      START_DATE,
      END_DATE,
      CREATED_DT,
      CREATED_BY
    )
    VALUES
    (
      V_ID,
      P_EMPLOYEE_ID,
      P_SHIFT_ID,
      P_START_DATE,
      P_END_DATE,
      TRUNC(SYSDATE),
      P_CREATED_BY
    );
  IF TRUNC(P_START_DATE) <= TRUNC(SYSDATE) THEN
    HRIS_REATTENDANCE(TRUNC(P_START_DATE),P_EMPLOYEE_ID);
  END IF;
END;CREATE OR REPLACE PROCEDURE HRIS_SHIFT_EDIT(
    P_ID HRIS_EMPLOYEE_SHIFT_ASSIGN.ID%TYPE,
    P_SHIFT_ID HRIS_EMPLOYEE_SHIFT_ASSIGN.SHIFT_ID%TYPE,
    P_START_DATE HRIS_EMPLOYEE_SHIFT_ASSIGN.START_DATE%TYPE,
    P_END_DATE HRIS_EMPLOYEE_SHIFT_ASSIGN.END_DATE%TYPE,
    P_MODIFIED_BY HRIS_EMPLOYEE_SHIFT_ASSIGN.MODIFIED_BY%TYPE)
AS
  V_OLD_START_DATE HRIS_EMPLOYEE_SHIFT_ASSIGN.START_DATE%TYPE;
  V_EMPLOYEE_ID HRIS_EMPLOYEE_SHIFT_ASSIGN.EMPLOYEE_ID%TYPE;
BEGIN
  SELECT START_DATE
  INTO V_OLD_START_DATE
  FROM HRIS_EMPLOYEE_SHIFT_ASSIGN
  WHERE ID =P_ID;
  --
  IF(P_END_DATE IS NOT NULL) THEN
    UPDATE HRIS_EMPLOYEE_SHIFT_ASSIGN
    SET SHIFT_ID =P_SHIFT_ID,
      START_DATE =P_START_DATE,
      END_DATE   =P_END_DATE,
      MODIFIED_DT=SYSDATE,
      MODIFIED_BY=P_MODIFIED_BY
    WHERE ID     =P_ID;
  ELSE
    UPDATE HRIS_EMPLOYEE_SHIFT_ASSIGN
    SET SHIFT_ID =P_SHIFT_ID,
      START_DATE =P_START_DATE,
      MODIFIED_DT=SYSDATE,
      MODIFIED_BY=P_MODIFIED_BY
    WHERE ID     =P_ID;
  END IF;
  IF(TRUNC(V_OLD_START_DATE) <= TRUNC(P_START_DATE))THEN
    HRIS_REATTENDANCE(TRUNC(V_OLD_START_DATE),V_EMPLOYEE_ID);
  ELSE
    HRIS_REATTENDANCE(TRUNC(P_START_DATE),V_EMPLOYEE_ID);
  END IF;
END;create or replace PROCEDURE HRIS_SYSTEM_NOTIFICATION(
    P_TO_EMPLOYEE_ID HRIS_NOTIFICATION.MESSAGE_TO%TYPE,
    P_MESSAGE_DATETIME HRIS_NOTIFICATION.MESSAGE_DATETIME%TYPE,
    P_MESSAGE_TITLE HRIS_NOTIFICATION.MESSAGE_TITLE%TYPE,
    P_MESSAGE_DESC HRIS_NOTIFICATION.MESSAGE_DESC%TYPE,
    P_ROUTE HRIS_NOTIFICATION.ROUTE%TYPE)
AS
  V_MESSAGE_ID HRIS_NOTIFICATION.MESSAGE_ID%TYPE;
  V_MESSAGE_FROM HRIS_NOTIFICATION.MESSAGE_FROM%TYPE;
  V_EXPIRY_TIME HRIS_NOTIFICATION.EXPIRY_TIME%TYPE;
BEGIN
  SELECT NVL(MAX(MESSAGE_ID),0)+1 INTO V_MESSAGE_ID FROM HRIS_NOTIFICATION;
  --
  SELECT EMPLOYEE_ID
  INTO V_MESSAGE_FROM
  FROM HRIS_EMPLOYEES
  WHERE IS_ADMIN='Y'
  AND ROWNUM    =1;
  --
  V_EXPIRY_TIME:=P_MESSAGE_DATETIME+14;
  --
  INSERT
  INTO HRIS_NOTIFICATION
    (
      MESSAGE_ID,
      MESSAGE_DATETIME,
      MESSAGE_TITLE,
      MESSAGE_DESC,
      MESSAGE_FROM,
      MESSAGE_TO,
      STATUS,
      EXPIRY_TIME,
      ROUTE
    )
    VALUES
    (
      V_MESSAGE_ID,
      P_MESSAGE_DATETIME,
      P_MESSAGE_TITLE,
      P_MESSAGE_DESC,
      V_MESSAGE_FROM,
      P_TO_EMPLOYEE_ID,
      'U',
      V_EXPIRY_TIME,
      P_ROUTE
    );
EXCEPTION
WHEN NO_DATA_FOUND THEN
  DBMS_OUTPUT.PUT_LINE ('No Admin is defined!!!' );
END;CREATE OR REPLACE PROCEDURE HRIS_UPDATE_EMPLOYEE_SERVICE(
    P_JOB_HISTORY_ID HRIS_JOB_HISTORY.JOB_HISTORY_ID%TYPE)
AS
BEGIN
  DECLARE
    JOB_HISTORY HRIS_JOB_HISTORY%ROWTYPE;
    IS_LATEST NUMBER:=0;
  BEGIN
    SELECT *
    INTO JOB_HISTORY
    FROM HRIS_JOB_HISTORY
    WHERE JOB_HISTORY_ID=P_JOB_HISTORY_ID;
    SELECT COUNT(*)
    INTO IS_LATEST
    FROM
      (SELECT MAX(START_DATE) AS MAX_START_DATE
      FROM HRIS_JOB_HISTORY
      WHERE EMPLOYEE_ID=JOB_HISTORY.EMPLOYEE_ID
      GROUP BY EMPLOYEE_ID
      ) H
    WHERE H.MAX_START_DATE=JOB_HISTORY.START_DATE;
    IF (IS_LATEST         >0 AND JOB_HISTORY.START_DATE<=TRUNC(SYSDATE) ) THEN
      UPDATE HRIS_EMPLOYEES
      SET BRANCH_ID           =JOB_HISTORY.TO_BRANCH_ID,
        DEPARTMENT_ID         =JOB_HISTORY.TO_DEPARTMENT_ID,
        DESIGNATION_ID        =JOB_HISTORY.TO_DESIGNATION_ID,
        POSITION_ID           =JOB_HISTORY.TO_POSITION_ID,
        SERVICE_TYPE_ID       =JOB_HISTORY.TO_SERVICE_TYPE_ID,
        SERVICE_EVENT_TYPE_ID =JOB_HISTORY.SERVICE_EVENT_TYPE_ID,
        COMPANY_ID            =JOB_HISTORY.TO_COMPANY_ID,
        SALARY                = JOB_HISTORY.TO_SALARY,
        RETIRED_FLAG          = JOB_HISTORY.RETIRED_FLAG,
        STATUS                = (
        CASE
          WHEN JOB_HISTORY.DISABLED_FLAG = 'Y'
          THEN 'D'
          ELSE 'E'
        END)
      WHERE EMPLOYEE_ID =JOB_HISTORY.EMPLOYEE_ID;
    END IF;
  END;
END HRIS_UPDATE_EMPLOYEE_SERVICE; create or replace PROCEDURE HRIS_WOD_LEAVE_ADDITION(
    P_WOD_ID HRIS_EMPLOYEE_WORK_DAYOFF.ID%TYPE )
AS
  V_EMPLOYEE_ID HRIS_EMPLOYEE_WORK_DAYOFF.EMPLOYEE_ID%TYPE;
  V_FROM_DATE HRIS_EMPLOYEE_WORK_DAYOFF.FROM_DATE%TYPE;
  V_TO_DATE HRIS_EMPLOYEE_WORK_DAYOFF.TO_DATE%TYPE;
  V_DURATION NUMBER;
  P_EMPLOYEE_ID HRIS_EMPLOYEES.EMPLOYEE_ID%TYPE;
  --
  V_TOTAL_HOUR HRIS_ATTENDANCE_DETAIL.TOTAL_HOUR%TYPE;
  --
  V_SUBSTITUTE_LEAVE_ID HRIS_LEAVE_MASTER_SETUP.LEAVE_ID%TYPE;
  V_BALANCE HRIS_EMPLOYEE_LEAVE_ASSIGN.BALANCE%TYPE;
  V_INCREMENT_DAY FLOAT    :=0;
  V_ON_TRAVEL CHAR(1 BYTE) :='N';
  V_SHIFT_ID  NUMBER(7,0);
BEGIN
  SELECT LEAVE_ID
  INTO V_SUBSTITUTE_LEAVE_ID
  FROM HRIS_LEAVE_MASTER_SETUP
  WHERE IS_SUBSTITUTE='Y'
  AND ROWNUM         = 1;
  --
  SELECT FROM_DATE,
    TO_DATE,
    TRUNC(TO_DATE)-TRUNC(FROM_DATE),
    EMPLOYEE_ID,
    APPROVED_BY
  INTO V_FROM_DATE,
    V_TO_DATE,
    V_DURATION,
    V_EMPLOYEE_ID,
    P_EMPLOYEE_ID
  FROM HRIS_EMPLOYEE_WORK_DAYOFF
  WHERE ID= P_WOD_ID;
  --
  BEGIN
    SELECT BALANCE
    INTO V_BALANCE
    FROM HRIS_EMPLOYEE_LEAVE_ASSIGN
    WHERE EMPLOYEE_ID=V_EMPLOYEE_ID
    AND LEAVE_ID     = V_SUBSTITUTE_LEAVE_ID;
  EXCEPTION
  WHEN no_data_found THEN
    INSERT
    INTO HRIS_EMPLOYEE_LEAVE_ASSIGN
      (
        EMPLOYEE_ID,
        LEAVE_ID,
        PREVIOUS_YEAR_BAL,
        TOTAL_DAYS,
        BALANCE,
        CREATED_DT,
        CREATED_BY
      )
      VALUES
      (
        V_EMPLOYEE_ID,
        V_SUBSTITUTE_LEAVE_ID,
        0,
        0,
        0,
        TRUNC(SYSDATE),
        P_EMPLOYEE_ID
      );
  END;
  --
  FOR i IN 0..V_DURATION
  LOOP
    BEGIN
      SELECT TOTAL_HOUR,
        (
        CASE
          WHEN TRAVEL_ID IS NOT NULL
          THEN 'Y'
          ELSE 'N'
        END),
        SHIFT_ID
      INTO V_TOTAL_HOUR,
        V_ON_TRAVEL,
        V_SHIFT_ID
      FROM HRIS_ATTENDANCE_DETAIL
      WHERE EMPLOYEE_ID= V_EMPLOYEE_ID
      AND ATTENDANCE_DT= TRUNC(V_FROM_DATE)+i;
    EXCEPTION
    WHEN no_data_found THEN
      CONTINUE;
    END;
    IF V_ON_TRAVEL = 'Y' THEN
      SELECT TOTAL_WORKING_HR
      INTO V_TOTAL_HOUR
      FROM HRIS_SHIFTS
      WHERE SHIFT_ID = V_SHIFT_ID;
    END IF;
    --
    IF((V_TOTAL_HOUR /60) BETWEEN 2 AND 4) THEN
      V_INCREMENT_DAY         :=.5;
    ELSIF ((V_TOTAL_HOUR /60) >=4) THEN
      V_INCREMENT_DAY         :=1;
    END IF;
  END LOOP;
  --
  INSERT
  INTO HRIS_EMPLOYEE_LEAVE_ADDITION
    (
      EMPLOYEE_ID,
      LEAVE_ID,
      NO_OF_DAYS,
      REMARKS,
      CREATED_DATE,
      WOD_ID,
      WOH_ID
    )
    VALUES
    (
      V_EMPLOYEE_ID,
      V_SUBSTITUTE_LEAVE_ID,
      V_INCREMENT_DAY,
      'WOD REWARD',
      TRUNC(SYSDATE),
      P_WOD_ID,
      NULL
    );
END;CREATE OR REPLACE PROCEDURE HRIS_WOD_OT_ADDITION(
    P_ID HRIS_EMPLOYEE_WORK_DAYOFF.ID%TYPE)
AS
  V_OVERTIME_ID HRIS_OVERTIME.OVERTIME_ID%TYPE;
  V_EMPLOYEE_ID HRIS_EMPLOYEE_WORK_HOLIDAY.EMPLOYEE_ID%TYPE ;
  V_RECOMMENDED_BY HRIS_EMPLOYEE_WORK_HOLIDAY.RECOMMENDED_BY%TYPE ;
  V_APPROVED_BY HRIS_EMPLOYEE_WORK_HOLIDAY.APPROVED_BY%TYPE;
  V_REQUESTED_DT HRIS_EMPLOYEE_WORK_HOLIDAY.REQUESTED_DATE%TYPE;
  V_FROM_DATE HRIS_EMPLOYEE_WORK_HOLIDAY.FROM_DATE%TYPE;
  V_TO_DATE HRIS_EMPLOYEE_WORK_HOLIDAY.TO_DATE%TYPE;
  V_STATUS        CHAR(2 BYTE)      :='AP';
  V_DESCRIPTION   VARCHAR2(255 BYTE):='THIS IS WOH OT.';
  V_TOTAL_HOUR    NUMBER ;
  V_DIFF          NUMBER;
  V_DETAIL_ID     NUMBER;
  V_START_TIME    DATE ;
  V_END_TIME      DATE ;
  V_DETAIL_STATUS CHAR(1 BYTE):='E';
BEGIN
  BEGIN
    SELECT EMPLOYEE_ID,
      RECOMMENDED_BY,
      APPROVED_BY,
      REQUESTED_DATE,
      FROM_DATE,
      TO_DATE
    INTO V_EMPLOYEE_ID,
      V_RECOMMENDED_BY,
      V_APPROVED_BY,
      V_REQUESTED_DT,
      V_FROM_DATE,
      V_TO_DATE
    FROM HRIS_EMPLOYEE_WORK_DAYOFF
    WHERE ID = P_ID;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT('No WOH found for '||P_ID);
  END;
  V_DIFF :=TRUNC(V_TO_DATE)-TRUNC(V_FROM_DATE);
  FOR i                   IN 0..V_DIFF
  LOOP
    SELECT NVL(MAX(OVERTIME_ID),1)+1 INTO V_OVERTIME_ID FROM HRIS_OVERTIME;
    SELECT NVL(MAX(DETAIL_ID),1)+1 INTO V_DETAIL_ID FROM HRIS_OVERTIME_DETAIL;
    BEGIN
      SELECT (
        CASE
          WHEN AD.OVERALL_STATUS = 'WD'
          THEN AD.IN_TIME
          ELSE S.START_TIME
        END),
        (
        CASE
          WHEN AD.OVERALL_STATUS ='WD'
          THEN AD.OUT_TIME
          ELSE S.END_TIME
        END),
        (
        CASE
          WHEN AD.OVERALL_STATUS ='WD'
          THEN AD.TOTAL_HOUR
          ELSE S.TOTAL_WORKING_HR
        END)
      INTO V_START_TIME,
        V_END_TIME,
        V_TOTAL_HOUR
      FROM HRIS_ATTENDANCE_DETAIL AD
      JOIN HRIS_SHIFTS S
      ON (AD.SHIFT_ID        =S.SHIFT_ID)
      WHERE AD.ATTENDANCE_DT = TRUNC(V_FROM_DATE)+i
      AND AD.EMPLOYEE_ID     =V_EMPLOYEE_ID
      AND AD.OVERALL_STATUS IN ( 'WD','VP');
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      CONTINUE;
    END;
    IF(V_START_TIME IS NOT NULL AND V_END_TIME IS NOT NULL ) THEN
      INSERT
      INTO HRIS_OVERTIME
        (
          OVERTIME_ID,
          EMPLOYEE_ID,
          OVERTIME_DATE,
          REQUESTED_DATE,
          DESCRIPTION,
          STATUS,
          RECOMMENDED_BY,
          RECOMMENDED_DATE,
          APPROVED_BY,
          APPROVED_DATE,
          TOTAL_HOUR
        )
        VALUES
        (
          V_OVERTIME_ID,
          V_EMPLOYEE_ID,
          V_FROM_DATE+i,
          V_REQUESTED_DT,
          V_DESCRIPTION,
          V_STATUS,
          V_RECOMMENDED_BY,
          V_REQUESTED_DT,
          V_APPROVED_BY,
          V_REQUESTED_DT,
          V_TOTAL_HOUR
        );
      INSERT
      INTO HRIS_OVERTIME_DETAIL
        (
          DETAIL_ID,
          OVERTIME_ID,
          START_TIME,
          END_TIME,
          STATUS,
          TOTAL_HOUR
        )
        VALUES
        (
          V_DETAIL_ID,
          V_OVERTIME_ID,
          V_START_TIME,
          V_END_TIME,
          V_DETAIL_STATUS,
          V_TOTAL_HOUR
        );
    END IF;
  END LOOP;
END;CREATE OR REPLACE PROCEDURE HRIS_WOD_REWARD(
    P_ID HRIS_EMPLOYEE_WORK_DAYOFF.ID%TYPE)
AS
  V_EMPLOYEE_ID HRIS_EMPLOYEE_WORK_DAYOFF.EMPLOYEE_ID%TYPE;
  V_WOH_FLAG HRIS_POSITIONS.WOH_FLAG%TYPE;
  V_TO_DATE HRIS_EMPLOYEE_WORK_DAYOFF.TO_DATE%TYPE;
BEGIN
  SELECT EMPLOYEE_ID,
    TO_DATE
  INTO V_EMPLOYEE_ID,
    V_TO_DATE
  FROM HRIS_EMPLOYEE_WORK_DAYOFF
  WHERE ID    = P_ID;
  IF(V_TO_DATE>TRUNC(SYSDATE)) THEN
    RETURN;
  END IF;
  --
  BEGIN
    SELECT P.WOH_FLAG
    INTO V_WOH_FLAG
    FROM HRIS_EMPLOYEES E
    JOIN HRIS_POSITIONS P
    ON (E.POSITION_ID   = P.POSITION_ID)
    WHERE E.EMPLOYEE_ID =V_EMPLOYEE_ID;
  EXCEPTION
  WHEN no_data_found THEN
    RAISE_APPLICATION_ERROR(-20000, 'Employee position not set.');
  END;
  --
  IF V_WOH_FLAG ='L' THEN
    HRIS_WOD_LEAVE_ADDITION(P_ID);
  ELSIF V_WOH_FLAG ='O' THEN
    HRIS_WOD_OT_ADDITION(P_ID);
  END IF;
END;create or replace PROCEDURE HRIS_WOH_LEAVE_ADDITION(
    P_WOH_ID HRIS_EMPLOYEE_WORK_HOLIDAY.ID%TYPE )
AS
  V_EMPLOYEE_ID HRIS_EMPLOYEE_WORK_HOLIDAY.EMPLOYEE_ID%TYPE;
  V_FROM_DATE HRIS_EMPLOYEE_WORK_HOLIDAY.FROM_DATE%TYPE;
  V_TO_DATE HRIS_EMPLOYEE_WORK_HOLIDAY.TO_DATE%TYPE;
  V_DURATION NUMBER;
  P_EMPLOYEE_ID HRIS_EMPLOYEES.EMPLOYEE_ID%TYPE;
  --
  V_TOTAL_HOUR HRIS_ATTENDANCE_DETAIL.TOTAL_HOUR%TYPE;
  --
  V_SUBSTITUTE_LEAVE_ID HRIS_LEAVE_MASTER_SETUP.LEAVE_ID%TYPE;
  V_BALANCE HRIS_EMPLOYEE_LEAVE_ASSIGN.BALANCE%TYPE;
  V_INCREMENT_DAY FLOAT    :=0;
  V_ON_TRAVEL CHAR(1 BYTE) :='N';
  V_SHIFT_ID  NUMBER(7,0);
BEGIN
  SELECT LEAVE_ID
  INTO V_SUBSTITUTE_LEAVE_ID
  FROM HRIS_LEAVE_MASTER_SETUP
  WHERE IS_SUBSTITUTE='Y'
  AND ROWNUM         = 1;
  --
  SELECT FROM_DATE,
    TO_DATE,
    TRUNC(TO_DATE)-TRUNC(FROM_DATE),
    EMPLOYEE_ID,
    APPROVED_BY
  INTO V_FROM_DATE,
    V_TO_DATE,
    V_DURATION,
    V_EMPLOYEE_ID,
    P_EMPLOYEE_ID
  FROM HRIS_EMPLOYEE_WORK_HOLIDAY
  WHERE ID= P_WOH_ID;
  --
  BEGIN
    SELECT BALANCE
    INTO V_BALANCE
    FROM HRIS_EMPLOYEE_LEAVE_ASSIGN
    WHERE EMPLOYEE_ID=V_EMPLOYEE_ID
    AND LEAVE_ID     = V_SUBSTITUTE_LEAVE_ID;
  EXCEPTION
  WHEN no_data_found THEN
    INSERT
    INTO HRIS_EMPLOYEE_LEAVE_ASSIGN
      (
        EMPLOYEE_ID,
        LEAVE_ID,
        PREVIOUS_YEAR_BAL,
        TOTAL_DAYS,
        BALANCE,
        CREATED_DT,
        CREATED_BY
      )
      VALUES
      (
        V_EMPLOYEE_ID,
        V_SUBSTITUTE_LEAVE_ID,
        0,
        0,
        0,
        TRUNC(SYSDATE),
        P_EMPLOYEE_ID
      );
  END;
  --
  FOR i IN 0..V_DURATION
  LOOP
    BEGIN
      SELECT TOTAL_HOUR,
        (
        CASE
          WHEN TRAVEL_ID IS NOT NULL
          THEN 'Y'
          ELSE 'N'
        END),
        SHIFT_ID
      INTO V_TOTAL_HOUR,
        V_ON_TRAVEL,
        V_SHIFT_ID
      FROM HRIS_ATTENDANCE_DETAIL
      WHERE EMPLOYEE_ID= V_EMPLOYEE_ID
      AND ATTENDANCE_DT= TRUNC(V_FROM_DATE)+i;
    EXCEPTION
    WHEN no_data_found THEN
      CONTINUE;
    END;
    --
    IF V_ON_TRAVEL = 'Y' THEN
      SELECT TOTAL_WORKING_HR
      INTO V_TOTAL_HOUR
      FROM HRIS_SHIFTS
      WHERE SHIFT_ID = V_SHIFT_ID;
    END IF;
    --
    IF((V_TOTAL_HOUR /60) BETWEEN 2 AND 4) THEN
      V_INCREMENT_DAY         :=.5;
    ELSIF ((V_TOTAL_HOUR /60) >=4) THEN
      V_INCREMENT_DAY         :=1;
    END IF;
  END LOOP;
  --
  INSERT
  INTO HRIS_EMPLOYEE_LEAVE_ADDITION
    (
      EMPLOYEE_ID,
      LEAVE_ID,
      NO_OF_DAYS,
      REMARKS,
      CREATED_DATE,
      WOD_ID,
      WOH_ID
    )
    VALUES
    (
      V_EMPLOYEE_ID,
      V_SUBSTITUTE_LEAVE_ID,
      V_INCREMENT_DAY,
      'WOH REWARD',
      TRUNC(SYSDATE),
      NULL,
      P_WOH_ID
    );
END;CREATE OR REPLACE PROCEDURE HRIS_WOH_OT_ADDITION(
    P_ID HRIS_EMPLOYEE_WORK_HOLIDAY.ID%TYPE)
AS
  V_OVERTIME_ID HRIS_OVERTIME.OVERTIME_ID%TYPE;
  V_EMPLOYEE_ID HRIS_EMPLOYEE_WORK_HOLIDAY.EMPLOYEE_ID%TYPE ;
  V_RECOMMENDED_BY HRIS_EMPLOYEE_WORK_HOLIDAY.RECOMMENDED_BY%TYPE ;
  V_APPROVED_BY HRIS_EMPLOYEE_WORK_HOLIDAY.APPROVED_BY%TYPE;
  V_REQUESTED_DT HRIS_EMPLOYEE_WORK_HOLIDAY.REQUESTED_DATE%TYPE;
  V_FROM_DATE HRIS_EMPLOYEE_WORK_HOLIDAY.FROM_DATE%TYPE;
  V_TO_DATE HRIS_EMPLOYEE_WORK_HOLIDAY.TO_DATE%TYPE;
  V_STATUS        CHAR(2 BYTE)      :='AP';
  V_DESCRIPTION   VARCHAR2(255 BYTE):='THIS IS WOH OT.';
  V_TOTAL_HOUR    NUMBER ;
  V_DIFF          NUMBER;
  V_DETAIL_ID     NUMBER;
  V_START_TIME    DATE ;
  V_END_TIME      DATE ;
  V_DETAIL_STATUS CHAR(1 BYTE):='E';
BEGIN
  BEGIN
    SELECT EMPLOYEE_ID,
      RECOMMENDED_BY,
      APPROVED_BY,
      REQUESTED_DATE,
      FROM_DATE,
      TO_DATE
    INTO V_EMPLOYEE_ID,
      V_RECOMMENDED_BY,
      V_APPROVED_BY,
      V_REQUESTED_DT,
      V_FROM_DATE,
      V_TO_DATE
    FROM HRIS_EMPLOYEE_WORK_HOLIDAY
    WHERE ID = P_ID;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT('No WOH found for '||P_ID);
  END;
  V_DIFF :=TRUNC(V_TO_DATE)-TRUNC(V_FROM_DATE);
  FOR i                   IN 0..V_DIFF
  LOOP
    SELECT NVL(MAX(OVERTIME_ID),1)+1 INTO V_OVERTIME_ID FROM HRIS_OVERTIME;
    SELECT NVL(MAX(DETAIL_ID),1)+1 INTO V_DETAIL_ID FROM HRIS_OVERTIME_DETAIL;
    BEGIN
      SELECT (
        CASE
          WHEN AD.OVERALL_STATUS = 'WD'
          THEN AD.IN_TIME
          ELSE S.START_TIME
        END),
        (
        CASE
          WHEN AD.OVERALL_STATUS ='WD'
          THEN AD.OUT_TIME
          ELSE S.END_TIME
        END),
        (
        CASE
          WHEN AD.OVERALL_STATUS ='WD'
          THEN AD.TOTAL_HOUR
          ELSE S.TOTAL_WORKING_HR
        END)
      INTO V_START_TIME,
        V_END_TIME,
        V_TOTAL_HOUR
      FROM HRIS_ATTENDANCE_DETAIL AD
      JOIN HRIS_SHIFTS S
      ON (AD.SHIFT_ID        =S.SHIFT_ID)
      WHERE AD.ATTENDANCE_DT = TRUNC(V_FROM_DATE)+i
      AND AD.EMPLOYEE_ID     =V_EMPLOYEE_ID
      AND AD.OVERALL_STATUS IN ( 'WH','VP');
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      CONTINUE;
    END;
    IF(V_START_TIME IS NOT NULL AND V_END_TIME IS NOT NULL ) THEN
      INSERT
      INTO HRIS_OVERTIME
        (
          OVERTIME_ID,
          EMPLOYEE_ID,
          OVERTIME_DATE,
          REQUESTED_DATE,
          DESCRIPTION,
          STATUS,
          RECOMMENDED_BY,
          RECOMMENDED_DATE,
          APPROVED_BY,
          APPROVED_DATE,
          TOTAL_HOUR
        )
        VALUES
        (
          V_OVERTIME_ID,
          V_EMPLOYEE_ID,
          V_FROM_DATE+i,
          V_REQUESTED_DT,
          V_DESCRIPTION,
          V_STATUS,
          V_RECOMMENDED_BY,
          V_REQUESTED_DT,
          V_APPROVED_BY,
          V_REQUESTED_DT,
          V_TOTAL_HOUR
        );
      INSERT
      INTO HRIS_OVERTIME_DETAIL
        (
          DETAIL_ID,
          OVERTIME_ID,
          START_TIME,
          END_TIME,
          STATUS,
          TOTAL_HOUR
        )
        VALUES
        (
          V_DETAIL_ID,
          V_OVERTIME_ID,
          V_START_TIME,
          V_END_TIME,
          V_DETAIL_STATUS,
          V_TOTAL_HOUR
        );
    END IF;
  END LOOP;
END;CREATE OR REPLACE PROCEDURE HRIS_WOH_REWARD(
    P_ID HRIS_EMPLOYEE_WORK_HOLIDAY.ID%TYPE)
AS
  V_EMPLOYEE_ID HRIS_EMPLOYEE_WORK_HOLIDAY.EMPLOYEE_ID%TYPE;
  V_WOH_FLAG HRIS_POSITIONS.WOH_FLAG%TYPE;
  V_TO_DATE HRIS_EMPLOYEE_WORK_HOLIDAY.TO_DATE%TYPE;
BEGIN
  SELECT EMPLOYEE_ID,
    TO_DATE
  INTO V_EMPLOYEE_ID,
    V_TO_DATE
  FROM HRIS_EMPLOYEE_WORK_HOLIDAY
  WHERE ID    = P_ID;
  IF(V_TO_DATE>TRUNC(SYSDATE)) THEN
    RETURN;
  END IF;
  --
  BEGIN
    SELECT P.WOH_FLAG
    INTO V_WOH_FLAG
    FROM HRIS_EMPLOYEES E
    JOIN HRIS_POSITIONS P
    ON (E.POSITION_ID   = P.POSITION_ID)
    WHERE E.EMPLOYEE_ID =V_EMPLOYEE_ID;
  EXCEPTION
  WHEN no_data_found THEN
    RAISE_APPLICATION_ERROR(-20000, 'Position not set.');
  END;
  --
  IF V_WOH_FLAG ='L' THEN
    HRIS_WOH_LEAVE_ADDITION(P_ID);
  ELSIF V_WOH_FLAG ='O' THEN
    HRIS_WOH_OT_ADDITION(P_ID);
  END IF;
END;create or replace TRIGGER HRIS_AFTER_EMPLOYEE_PENALTY AFTER
  INSERT OR
  DELETE ON HRIS_EMPLOYEE_PENALTY_DAYS FOR EACH ROW BEGIN IF INSERTING THEN
  UPDATE HRIS_EMPLOYEE_LEAVE_ASSIGN
  SET BALANCE       = BALANCE-:new.NO_OF_DAYS
  WHERE EMPLOYEE_ID =:new.EMPLOYEE_ID
  AND LEAVE_ID      = :new.LEAVE_ID;
  NULL;
END IF;
IF DELETING THEN
  UPDATE HRIS_EMPLOYEE_LEAVE_ASSIGN
  SET BALANCE       = BALANCE+:old.NO_OF_DAYS
  WHERE EMPLOYEE_ID =:old.EMPLOYEE_ID
  AND LEAVE_ID      = :old.LEAVE_ID;
END IF;
END;CREATE OR REPLACE TRIGGER HRIS_AFTER_LEAVE_ADDITION AFTER
  INSERT OR
  DELETE ON HRIS_EMPLOYEE_LEAVE_ADDITION FOR EACH ROW BEGIN IF INSERTING THEN
  UPDATE HRIS_EMPLOYEE_LEAVE_ASSIGN
  SET BALANCE       = BALANCE   +:new.NO_OF_DAYS,
    TOTAL_DAYS      = TOTAL_DAYS+:new.NO_OF_DAYS
  WHERE EMPLOYEE_ID =:new.EMPLOYEE_ID
  AND LEAVE_ID      = :new.LEAVE_ID;
END IF;
IF DELETING THEN
  UPDATE HRIS_EMPLOYEE_LEAVE_ASSIGN
  SET BALANCE       = BALANCE   -:new.NO_OF_DAYS,
    TOTAL_DAYS      = TOTAL_DAYS-:new.NO_OF_DAYS
  WHERE EMPLOYEE_ID =:new.EMPLOYEE_ID
  AND LEAVE_ID      = :new.LEAVE_ID;
END IF;
END;
/DROP TRIGGER APPRAISAL_STATUS_TRIGGER;

CREATE OR REPLACE TRIGGER HRIS_APPRAISAL_STAT_TRG AFTER
  INSERT ON HRIS_APPRAISAL_ASSIGN FOR EACH ROW BEGIN
  INSERT
  INTO HRIS_APPRAISAL_STATUS
    (
      EMPLOYEE_ID,
      APPRAISAL_ID
    )
    VALUES
    (
      :new.EMPLOYEE_ID,
      :new.APPRAISAL_ID
    );
END;CREATE OR REPLACE TRIGGER HRIS_ATTENDANCE_TRG AFTER
  INSERT ON HRIS_ATTENDANCE FOR EACH ROW DECLARE V_IN_TIME HRIS_ATTENDANCE_DETAIL.IN_TIME%TYPE;
  V_SHIFT_ID HRIS_SHIFTS.SHIFT_ID%TYPE;
  V_OVERALL_STATUS HRIS_ATTENDANCE_DETAIL.OVERALL_STATUS%TYPE;
  V_LATE_STATUS HRIS_ATTENDANCE_DETAIL.LATE_STATUS%TYPE:='N';
  V_HALFDAY_FLAG HRIS_ATTENDANCE_DETAIL.HALFDAY_FLAG%TYPE;
  V_HALFDAY_PERIOD HRIS_ATTENDANCE_DETAIL.HALFDAY_PERIOD%TYPE;
  V_GRACE_PERIOD HRIS_ATTENDANCE_DETAIL.GRACE_PERIOD%TYPE;
  V_LATE_IN HRIS_SHIFTS.LATE_IN%TYPE;
  V_EARLY_OUT HRIS_SHIFTS.EARLY_OUT%TYPE;
  V_LATE_START_TIME TIMESTAMP;
  V_EARLY_END_TIME  TIMESTAMP;
  V_ADJUSTED_START_TIME HRIS_SHIFT_ADJUSTMENT.START_TIME%TYPE:=NULL;
  V_ADJUSTED_END_TIME HRIS_SHIFT_ADJUSTMENT.END_TIME%TYPE    :=NULL;
  V_LATE_COUNT NUMBER                                        :=0;
  V_TOTAL_HOUR NUMBER                                        :=0;
  V_TWO_DAY_SHIFT HRIS_ATTENDANCE_DETAIL.TWO_DAY_SHIFT%TYPE;
  V_HALF_INTERVAL DATE;
  BEGIN
    --
    BEGIN
      SELECT SHIFT_ID,
        OVERALL_STATUS,
        LATE_STATUS,
        HALFDAY_FLAG,
        HALFDAY_PERIOD,
        GRACE_PERIOD,
        IN_TIME,
        HALFDAY_PERIOD,
        TWO_DAY_SHIFT
      INTO V_SHIFT_ID,
        V_OVERALL_STATUS,
        V_LATE_STATUS,
        V_HALFDAY_FLAG,
        V_HALFDAY_PERIOD,
        V_GRACE_PERIOD,
        V_IN_TIME,
        V_HALFDAY_PERIOD,
        V_TWO_DAY_SHIFT
      FROM HRIS_ATTENDANCE_DETAIL
      WHERE ATTENDANCE_DT = TRUNC(:new.ATTENDANCE_DT)
      AND EMPLOYEE_ID     = :new.EMPLOYEE_ID;
      IF V_TWO_DAY_SHIFT  ='E' THEN
        --
        SELECT S.LATE_IN,
          S.EARLY_OUT,
          S.START_TIME+((1/1440)*NVL(S.LATE_IN,0)),
          S.END_TIME  -((1/1440)*NVL(S.EARLY_OUT,0))
        INTO V_LATE_IN,
          V_EARLY_OUT,
          V_LATE_START_TIME,
          V_EARLY_END_TIME
        FROM HRIS_SHIFTS S
        WHERE S.SHIFT_ID=V_SHIFT_ID ;
        --
        SELECT V_EARLY_END_TIME + (V_LATE_START_TIME -V_EARLY_END_TIME)/2
        INTO V_HALF_INTERVAL
        FROM DUAL;
        IF (TO_DATE(TO_CHAR(:new.ATTENDANCE_TIME,'HH:MI AM'),'HH:MI AM')) < (TO_DATE(TO_CHAR(V_HALF_INTERVAL,'HH:MI AM'),'HH:MI AM')) THEN
          SELECT OVERALL_STATUS,
            LATE_STATUS,
            HALFDAY_FLAG,
            HALFDAY_PERIOD,
            GRACE_PERIOD,
            IN_TIME,
            HALFDAY_PERIOD,
            GRACE_PERIOD
          INTO V_OVERALL_STATUS,
            V_LATE_STATUS,
            V_HALFDAY_FLAG,
            V_HALFDAY_PERIOD,
            V_GRACE_PERIOD,
            V_IN_TIME,
            V_HALFDAY_PERIOD,
            V_GRACE_PERIOD
          FROM HRIS_ATTENDANCE_DETAIL
          WHERE ATTENDANCE_DT = TRUNC(:new.ATTENDANCE_DT-1)
          AND EMPLOYEE_ID     = :new.EMPLOYEE_ID;
        END IF;
        --
      END IF;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE ('Attendance Job for '||:new.ATTENDANCE_DT||' not excecuted');
      RETURN;
    END;
    --
    BEGIN
      IF V_HALFDAY_PERIOD IS NOT NULL THEN
        SELECT S.LATE_IN,
          S.EARLY_OUT,
          (
          CASE
            WHEN V_HALFDAY_PERIOD ='F'
            THEN S.HALF_DAY_IN_TIME
            ELSE S.START_TIME
          END ) +((1/1440)*NVL(S.LATE_IN,0)),
          (
          CASE
            WHEN V_HALFDAY_PERIOD ='F'
            THEN S.END_TIME
            ELSE S.HALF_DAY_OUT_TIME
          END ) -((1/1440)*NVL(S.EARLY_OUT,0))
        INTO V_LATE_IN,
          V_EARLY_OUT,
          V_LATE_START_TIME,
          V_EARLY_END_TIME
        FROM HRIS_SHIFTS S
        WHERE S.SHIFT_ID    =V_SHIFT_ID ;
      ELSIF V_GRACE_PERIOD IS NOT NULL THEN
        SELECT S.LATE_IN,
          S.EARLY_OUT,
          (
          CASE
            WHEN V_GRACE_PERIOD ='E'
            THEN S.GRACE_START_TIME
            ELSE S.START_TIME
          END) +((1/1440)*NVL(S.LATE_IN,0)),
          (
          CASE
            WHEN V_GRACE_PERIOD ='E'
            THEN S.END_TIME
            ELSE S.GRACE_END_TIME
          END) -((1/1440)*NVL(S.EARLY_OUT,0))
        INTO V_LATE_IN,
          V_EARLY_OUT,
          V_LATE_START_TIME,
          V_EARLY_END_TIME
        FROM HRIS_SHIFTS S
        WHERE S.SHIFT_ID=V_SHIFT_ID ;
      ELSE
        SELECT S.LATE_IN,
          S.EARLY_OUT,
          S.START_TIME+((1/1440)*NVL(S.LATE_IN,0)),
          S.END_TIME  -((1/1440)*NVL(S.EARLY_OUT,0))
        INTO V_LATE_IN,
          V_EARLY_OUT,
          V_LATE_START_TIME,
          V_EARLY_END_TIME
        FROM HRIS_SHIFTS S
        WHERE S.SHIFT_ID=V_SHIFT_ID ;
      END IF;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(-20344, 'SHIFT WITH SHIFT_ID => '|| V_SHIFT_ID ||' NOT FOUND.');
    END;
    --   CHECK FOR ADJUSTED SHIFT
    BEGIN
      SELECT SA.START_TIME,
        SA.END_TIME
      INTO V_ADJUSTED_START_TIME,
        V_ADJUSTED_END_TIME
      FROM HRIS_SHIFT_ADJUSTMENT SA
      JOIN HRIS_EMPLOYEE_SHIFT_ADJUSTMENT ESA
      ON (SA.ADJUSTMENT_ID=ESA.ADJUSTMENT_ID)
      WHERE (TRUNC(:new.ATTENDANCE_DT) BETWEEN TRUNC(SA.ADJUSTMENT_START_DATE) AND TRUNC(SA.ADJUSTMENT_END_DATE) )
      AND ESA.EMPLOYEE_ID =:new.EMPLOYEE_ID;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('NO ADJUSTMENT FOUND FOR EMPLOYEE =>'|| :new.EMPLOYEE_ID || 'ON THE DATE'||:new.ATTENDANCE_DT);
    END;
    IF(V_ADJUSTED_START_TIME IS NOT NULL) THEN
      V_LATE_START_TIME      :=V_ADJUSTED_START_TIME;
      V_LATE_START_TIME      := V_LATE_START_TIME+((1/1440)*NVL(V_LATE_IN,0));
    END IF;
    IF(V_ADJUSTED_END_TIME IS NOT NULL) THEN
      V_EARLY_END_TIME     :=V_ADJUSTED_END_TIME;
      V_EARLY_END_TIME     := V_EARLY_END_TIME -((1/1440)*NVL(V_EARLY_OUT,0));
    END IF;
    --      END FOR CHECK FOR ADJUSTED_SHIFT
    IF(V_TWO_DAY_SHIFT = 'E') THEN
      --    two day shift
      IF (TO_DATE(TO_CHAR(:new.ATTENDANCE_TIME,'HH:MI AM'),'HH:MI AM')) < (TO_DATE(TO_CHAR(V_HALF_INTERVAL,'HH:MI AM'),'HH:MI AM')) THEN
        IF V_OVERALL_STATUS                                             ='PR' AND (V_EARLY_END_TIME-TRUNC(V_EARLY_END_TIME))>(:new.ATTENDANCE_TIME-TRUNC(:new.ATTENDANCE_TIME)) THEN
          IF (V_LATE_STATUS                                             = 'L') THEN
            V_LATE_STATUS                                              :='B';
          ELSE
            V_LATE_STATUS :='E';
          END IF;
        ELSE
          IF (V_LATE_STATUS     ='B') THEN
            V_LATE_STATUS      :='L';
          ELSIF ( V_LATE_STATUS ='E') THEN
            V_LATE_STATUS      := 'N';
          END IF;
        END IF;
        --
        SELECT SUM(ABS(EXTRACT( HOUR FROM DIFF ))*60 + ABS(EXTRACT( MINUTE FROM DIFF )))
        INTO V_TOTAL_HOUR
        FROM
          (SELECT (:new.ATTENDANCE_TIME-TRUNC(:new.ATTENDANCE_TIME))-(V_IN_TIME-TRUNC(V_IN_TIME)) AS DIFF
          FROM DUAL
          ) ;
        UPDATE HRIS_ATTENDANCE_DETAIL
        SET OUT_TIME        = TO_DATE ( TO_CHAR (:new.ATTENDANCE_TIME, 'DD-MON-YY HH:MI AM'), 'DD-MON-YY HH:MI AM'),
          LATE_STATUS       =V_LATE_STATUS,
          OUT_REMARKS       = :new.REMARKS,
          TOTAL_HOUR        =V_TOTAL_HOUR
        WHERE ATTENDANCE_DT = TRUNC(:new.ATTENDANCE_DT-1)
        AND EMPLOYEE_ID     = :new.EMPLOYEE_ID;
      ELSE
        IF (V_IN_TIME            IS NULL) THEN
          IF(V_OVERALL_STATUS     ='DO') THEN
            V_OVERALL_STATUS     :='WD';
          ELSIF (V_OVERALL_STATUS ='HD') THEN
            V_OVERALL_STATUS     :='WH';
          ELSIF (V_OVERALL_STATUS ='LV') THEN
            NULL;
          ELSIF (V_OVERALL_STATUS ='TV') THEN
            NULL;
          ELSIF (V_OVERALL_STATUS ='TN') THEN
            NULL;
          ELSIF(V_HALFDAY_FLAG   !='Y' AND V_HALFDAY_PERIOD IS NOT NULL) OR V_GRACE_PERIOD IS NOT NULL THEN
            V_OVERALL_STATUS     :='LP';
          ELSIF (V_OVERALL_STATUS ='AB') THEN
            V_OVERALL_STATUS     :='PR';
          END IF;
          IF V_OVERALL_STATUS = 'PR' AND ( V_LATE_START_TIME-TRUNC(V_LATE_START_TIME))<(:new.ATTENDANCE_TIME-TRUNC(:new.ATTENDANCE_TIME)) THEN
            V_LATE_STATUS    :='L';
          END IF;
          --
          UPDATE HRIS_ATTENDANCE_DETAIL
          SET IN_TIME         = TO_DATE ( TO_CHAR (:new.ATTENDANCE_TIME, 'DD-MON-YY HH:MI AM'), 'DD-MON-YY HH:MI AM'),
            OVERALL_STATUS    = V_OVERALL_STATUS,
            LATE_STATUS       = V_LATE_STATUS,
            IN_REMARKS        = :new.REMARKS
          WHERE ATTENDANCE_DT = TRUNC (:new.ATTENDANCE_DT)
          AND EMPLOYEE_ID     = :new.EMPLOYEE_ID;
          RETURN;
        END IF;
        --
      END IF;
      --      end for two day shift
    ELSE
      --    nornal shift
      IF (V_IN_TIME            IS NULL) THEN
        IF(V_OVERALL_STATUS     ='DO') THEN
          V_OVERALL_STATUS     :='WD';
        ELSIF (V_OVERALL_STATUS ='HD') THEN
          V_OVERALL_STATUS     :='WH';
        ELSIF (V_OVERALL_STATUS ='LV') THEN
          NULL;
        ELSIF (V_OVERALL_STATUS ='TV') THEN
          NULL;
        ELSIF (V_OVERALL_STATUS ='TN') THEN
          NULL;
        ELSIF(V_HALFDAY_FLAG !='Y' AND V_HALFDAY_PERIOD IS NOT NULL) OR V_GRACE_PERIOD IS NOT NULL THEN
          V_OVERALL_STATUS   :='LP';
        ELSE
          V_OVERALL_STATUS :='PR';
        END IF;
        IF V_OVERALL_STATUS = 'PR' AND ( V_LATE_START_TIME-TRUNC(V_LATE_START_TIME))<(:new.ATTENDANCE_TIME-TRUNC(:new.ATTENDANCE_TIME)) THEN
          V_LATE_STATUS    :='L';
        END IF;
        --
        UPDATE HRIS_ATTENDANCE_DETAIL
        SET IN_TIME         = TO_DATE ( TO_CHAR (:new.ATTENDANCE_TIME, 'DD-MON-YY HH:MI AM'), 'DD-MON-YY HH:MI AM'),
          OVERALL_STATUS    = V_OVERALL_STATUS,
          LATE_STATUS       = V_LATE_STATUS,
          IN_REMARKS        = :new.REMARKS
        WHERE ATTENDANCE_DT = TO_DATE (:new.ATTENDANCE_DT, 'DD-MON-YY')
        AND EMPLOYEE_ID     = :new.EMPLOYEE_ID;
        RETURN;
      END IF;
      --
      IF V_OVERALL_STATUS ='PR' AND (V_EARLY_END_TIME-TRUNC(V_EARLY_END_TIME))>(:new.ATTENDANCE_TIME-TRUNC(:new.ATTENDANCE_TIME)) THEN
        IF (V_LATE_STATUS = 'L') THEN
          V_LATE_STATUS  :='B';
        ELSE
          V_LATE_STATUS :='E';
        END IF;
      ELSE
        IF (V_LATE_STATUS     ='B') THEN
          V_LATE_STATUS      :='L';
        ELSIF ( V_LATE_STATUS ='E') THEN
          V_LATE_STATUS      := 'N';
        END IF;
      END IF;
      --
      SELECT SUM(ABS(EXTRACT( HOUR FROM DIFF ))*60 + ABS(EXTRACT( MINUTE FROM DIFF )))
      INTO V_TOTAL_HOUR
      FROM
        (SELECT (:new.ATTENDANCE_TIME-TRUNC(:new.ATTENDANCE_TIME))-(V_IN_TIME-TRUNC(V_IN_TIME)) AS DIFF
        FROM DUAL
        ) ;
      UPDATE HRIS_ATTENDANCE_DETAIL
      SET OUT_TIME        = TO_DATE ( TO_CHAR (:new.ATTENDANCE_TIME, 'DD-MON-YY HH:MI AM'), 'DD-MON-YY HH:MI AM'),
        LATE_STATUS       =V_LATE_STATUS,
        OUT_REMARKS       = :new.REMARKS,
        TOTAL_HOUR        =V_TOTAL_HOUR
      WHERE ATTENDANCE_DT = TO_DATE (:new.ATTENDANCE_DT, 'DD-MON-YY')
      AND EMPLOYEE_ID     = :new.EMPLOYEE_ID;
      --      end of nornal shift
    END IF;
  END;CREATE OR REPLACE TRIGGER HRIS_BEFORE_LEAVE_REQUEST BEFORE
  UPDATE ON HRIS_EMPLOYEE_LEAVE_REQUEST FOR EACH ROW DECLARE V_BALANCE NUMBER(3,1);
  BEGIN
    IF(:new.HALF_DAY            IN ('F','S')) THEN
      V_BALANCE:= :new.NO_OF_DAYS/2;
    ELSE
      V_BALANCE:= :new.NO_OF_DAYS;
    END IF;
    IF :old.STATUS IN ('RQ','RC') AND :new.STATUS ='AP' THEN
      UPDATE HRIS_EMPLOYEE_LEAVE_ASSIGN
      SET BALANCE       = BALANCE -V_BALANCE
      WHERE EMPLOYEE_ID = :new.EMPLOYEE_ID
      AND LEAVE_ID      =:new.LEAVE_ID;
    ELSIF :old.STATUS   ='AP' AND :new.STATUS = 'C' THEN
      UPDATE HRIS_EMPLOYEE_LEAVE_ASSIGN
      SET BALANCE       = BALANCE +V_BALANCE
      WHERE EMPLOYEE_ID = :new.EMPLOYEE_ID
      AND LEAVE_ID      =:new.LEAVE_ID;
    END IF;
  END;create or replace TRIGGER HRIS_EMPLOYEE_ADD AFTER
  INSERT ON HRIS_EMPLOYEES FOR EACH ROW DECLARE V_FISCAL_YEAR_ID HRIS_FISCAL_YEARS.FISCAL_YEAR_ID%TYPE;
  V_MONTH_ID HRIS_MONTH_CODE.MONTH_ID%TYPE;
  V_CURRENT_MONTH_COUNT NUMBER;
  V_DEFAULT_DAYS        NUMBER;
  V_PRODATA_DAYS        NUMBER;
  BEGIN
    BEGIN
      SELECT FISCAL_YEAR_ID,
        MONTH_ID
      INTO V_FISCAL_YEAR_ID,
        V_MONTH_ID
      FROM HRIS_MONTH_CODE
      WHERE TRUNC(SYSDATE) BETWEEN FROM_DATE AND TO_DATE;
    EXCEPTION
    WHEN no_data_found THEN
      SYS.DBMS_OUTPUT.PUT('No Current Month found.');
      RETURN;
    END;
    SELECT MONTH_ROWNUM
    INTO V_CURRENT_MONTH_COUNT
    FROM
      (SELECT ROWNUM AS MONTH_ROWNUM,
        MONTH_ID
      FROM HRIS_MONTH_CODE
      WHERE FISCAL_YEAR_ID= V_FISCAL_YEAR_ID
      ORDER BY FROM_DATE
      ) MONTHS
    WHERE MONTH_ID =V_MONTH_ID;
    BEGIN
      FOR leave IN
      (SELECT LEAVE_ID,
        DEFAULT_DAYS,
        IS_PRODATA_BASIS
      FROM HRIS_LEAVE_MASTER_SETUP
      WHERE STATUS                 ='E'
      AND ASSIGN_ON_EMPLOYEE_SETUP ='Y'
      )
      LOOP
        V_DEFAULT_DAYS           := leave.DEFAULT_DAYS;
        V_PRODATA_DAYS           := leave.DEFAULT_DAYS;
        IF leave.IS_PRODATA_BASIS = 'Y' THEN
          V_PRODATA_DAYS         :=ROUND(V_DEFAULT_DAYS*((13-V_CURRENT_MONTH_COUNT)/12));
        END IF;
        INSERT
        INTO HRIS_EMPLOYEE_LEAVE_ASSIGN
          (
            EMPLOYEE_ID,
            LEAVE_ID,
            PREVIOUS_YEAR_BAL,
            TOTAL_DAYS,
            BALANCE,
            FISCAL_YEAR,
            CREATED_DT
          )
          VALUES
          (
            :new.EMPLOYEE_ID,
            leave.LEAVE_ID,
            0,
            V_PRODATA_DAYS,
            V_PRODATA_DAYS,
            V_FISCAL_YEAR_ID,
            TRUNC(SYSDATE)
          );
      END LOOP;
    END;
    BEGIN
      FOR holiday IN
      (SELECT HOLIDAY_ID
        FROM HRIS_HOLIDAY_MASTER_SETUP
        WHERE ASSIGN_ON_EMPLOYEE_SETUP = 'Y'
        AND STATUS                     ='E'
        AND START_DATE                >=TRUNC(SYSDATE)
      )
      LOOP
        INSERT
        INTO HRIS_EMPLOYEE_HOLIDAY
          (
            EMPLOYEE_ID,
            HOLIDAY_ID
          )
          VALUES
          (
            :new.EMPLOYEE_ID,
            holiday.HOLIDAY_ID
          );
      END LOOP;
    END;
  END;DROP TRIGGER UPDATE_FULL_NAME;

create or replace TRIGGER HRIS_UPDATE_FULL_NAME BEFORE
  UPDATE OR
  INSERT ON HRIS_EMPLOYEES FOR EACH ROW BEGIN IF INSERTING THEN :new.FULL_NAME := CONCAT(CONCAT(CONCAT(TRIM(:new.FIRST_NAME),' '),
    CASE
      WHEN :new.MIDDLE_NAME IS NOT NULL
      THEN CONCAT(TRIM(:new.MIDDLE_NAME), ' ')
      ELSE ''
    END ),TRIM(:new.LAST_NAME));
  RETURN;
ELSIF UPDATING THEN
  IF (:old.FIRST_NAME !=:new.FIRST_NAME OR :old.LAST_NAME !=:new.LAST_NAME OR (:old.MIDDLE_NAME IS NULL AND :new.MIDDLE_NAME IS NOT NULL) OR (:old.MIDDLE_NAME IS NOT NULL AND :new.MIDDLE_NAME IS NULL) OR :old.MIDDLE_NAME !=:new.MIDDLE_NAME ) THEN
    :new.FULL_NAME    := CONCAT(CONCAT(CONCAT(TRIM(:new.FIRST_NAME),' '),
    CASE
    WHEN :new.MIDDLE_NAME IS NOT NULL THEN
      CONCAT(TRIM(:new.MIDDLE_NAME), ' ')
    ELSE
      ''
    END ),TRIM(:new.LAST_NAME));
  END IF;
END IF;
END;DROP TRIGGER USER_SETTING_TRIGGER;

CREATE OR REPLACE TRIGGER HRIS_USER_SETTING_TRG AFTER
  INSERT ON HRIS_USERS FOR EACH ROW BEGIN
  INSERT INTO HRIS_USER_SETTING
    (USER_ID
    ) VALUES
    (:new.USER_ID
    );
END;
CREATE OR REPLACE FUNCTION BOOLEAN_DESC(
    P_FLAG CHAR)
  RETURN VARCHAR2
IS
  V_FLAG_DESC VARCHAR2(50 BYTE);
BEGIN
  V_FLAG_DESC:=
  (
    CASE P_FLAG
    WHEN 'Y' THEN
      'Yes'
    WHEN 'N'THEN
      'No'
    END);
  RETURN V_FLAG_DESC;
END; create or replace FUNCTION CHARGE_TYPE_DESC(
    P_CHARGE_TYPE CHAR)
  RETURN VARCHAR2
IS
  V_CHARGE_TYPE_DESC VARCHAR2(50 BYTE);
BEGIN
  V_CHARGE_TYPE_DESC:=
  (
    CASE P_CHARGE_TYPE
    WHEN 'H' THEN
      'Hourly'
    WHEN 'D'THEN
      'Day wise'
    WHEN 'W' THEN
      'Weekly'
    WHEN 'M' THEN
      'Monthly'
    END);
  RETURN V_CHARGE_TYPE_DESC;
END;create or replace FUNCTION FN_DECRYPT_PASSWORD(vText IN VARCHAR2)
RETURN VARCHAR2 IS
  nPasswordLength NUMBER;
  nIncrement NUMBER;
  vBodyText VARCHAR2(100);
  vFoundText VARCHAR2(100);
  vCharString CHAR(1);
  vPassword VARCHAR2(100);
  nPosition NUMBER;
  nStartPosition NUMBER;
BEGIN
 IF vText IS NOT NULL AND LENGTH(vText)=64 THEN
    nPasswordLength := TO_NUMBER(SUBSTR(vText, (LENGTH(vText)+1)-4,2));
    nIncrement := TO_NUMBER(SUBSTR(vText, (LENGTH(vText)+1)-2,2));
    nStartPosition := LENGTH(vText)-NVL(nPasswordLength,0)*3-3;
    vBodyText := SUBSTR(vText,nStartPosition,nPasswordLength * 3);

    nPosition := 1;
    vFoundText :='';

    FOR i IN 1..LENGTH(vBodyText/3) LOOP
      vCharString := CHR(TO_NUMBER(SUBSTR(vBodyText,nPosition,3))-567-nIncrement);
      vFoundText := vFoundText||vCharString;
      nPosition := nPosition + 3;
    END LOOP;


    vPassword := '';
    FOR i IN 0..LENGTH(vFoundText)-1 LOOP
       vPassword := vPassword||SUBSTR(vFoundText, LENGTH(vFoundText)-i,1);
    END LOOP;
    RETURN vPassword;
  ELSE
    RETURN NULL;
  END IF;
END;create or replace FUNCTION FN_ENCRYPT_PASSWORD(vText IN VARCHAR2)
RETURN VARCHAR2 IS
  vFalsePart VARCHAR2(100);
  vEndPart VARCHAR2(10);
  vRetValue VARCHAR2(100);
  vMainBody VARCHAR2(100):='';
  vRevertedText VARCHAR2(100):='';
  vASCIIValue VARCHAR2(3);
  nDiffRange NUMBER(2);
  vAddParts    VARCHAR2(100);
  vTemporaryPassword VARCHAR2(30);
BEGIN
  --Taking time factor
  IF LENGTH(vText)< 10 THEN
     vEndPart := '0'||TO_CHAR(LENGTH(vText))||TO_CHAR(SYSDATE, 'SS');
  ELSIF LENGTH(vText)>= 10 THEN
     vEndPart := TO_CHAR(LENGTH(vText))||TO_CHAR(SYSDATE, 'SS');
  END IF;

  --Temporary part goes here
  vTemporaryPassword := 'MAHESWORMAHARJANISHERO';
  vFalsePart :='';
  FOR i IN 1..LENGTH(vTemporaryPassword) LOOP
      vFalsePart := vFalsePart||TO_CHAR(TO_NUMBER(ASCII(SUBSTR(vTemporaryPassword,i,1)))+ TO_NUMBER(vEndPart));
  END LOOP;
  --Main part goes here

  FOR i IN 0..LENGTH(vText)-1 LOOP
     vRevertedText := vRevertedText||SUBSTR(vText, LENGTH(vText)-i,1);
  END LOOP;

  FOR i IN 1..LENGTH(vRevertedText) LOOP
    vASCIIValue :=  TO_CHAR(TO_NUMBER(ASCII(SUBSTR(vRevertedText,i,1)))+ 567 + TO_NUMBER(TO_CHAR(SYSDATE, 'SS')));
    vMainBody := vMainBody||vASCIIValue;
  END LOOP;

  vRetValue := vMainBody||vEndPart;
  IF LENGTH(vRetValue)< 64 THEN
     nDiffRange := 64-LENGTH(vRetValue);
  END IF;

  vRetValue := SUBSTR(vFalsePart,1,nDiffRange)||vRetValue;
  RETURN vRetValue;
END;create or replace FUNCTION HRIS_BEST_CASE_SHIFT(
    P_EMPLOYEE_ID HRIS_EMPLOYEES.EMPLOYEE_ID%TYPE,
    P_ATTENDANCE_DT DATE)
  RETURN NUMBER
AS
  V_SHIFT_ID HRIS_SHIFTS.SHIFT_ID%TYPE;
  V_IN_TIME           DATE;
  V_SHIFT_IN_TIME     DATE;
  V_IN_TIME_DIFF      NUMBER;
  V_IN_TIME_DIFF_MIN  NUMBER;
  V_MIN_IN_TIME       NUMBER;
  V_OUT_TIME          DATE;
  V_SHIFT_OUT_TIME    DATE;
  V_OUT_TIME_DIFF     NUMBER;
  V_OUT_TIME_DIFF_MIN NUMBER;
  V_MIN_IN_OUT_TIME   NUMBER;
BEGIN
  SELECT MIN(TO_DATE(TO_CHAR(ATTENDANCE_TIME,'HH:MI AM'),'HH:MI AM')) AS IN_TIME,
    MAX(TO_DATE(TO_CHAR(ATTENDANCE_TIME,'HH:MI AM'),'HH:MI AM'))      AS OUT_TIME
  INTO V_IN_TIME,
    V_OUT_TIME
  FROM HRIS_ATTENDANCE
  WHERE EMPLOYEE_ID =P_EMPLOYEE_ID
  AND ATTENDANCE_DT = P_ATTENDANCE_DT;
  --
  FOR shift IN
  (SELECT S.*
  FROM HRIS_EMPLOYEE_SHIFTS ES
  JOIN HRIS_SHIFTS S
  ON (ES.SHIFT_ID      = S.SHIFT_ID)
  WHERE ES.EMPLOYEE_ID = P_EMPLOYEE_ID
  AND (P_ATTENDANCE_DT BETWEEN ES.START_DATE AND ES.END_DATE)
  AND S.STATUS ='E'
  )
  LOOP
    V_SHIFT_IN_TIME    := shift.START_TIME+(.000694*NVL(shift.LATE_IN,0));
    V_SHIFT_IN_TIME    :=TO_DATE(TO_CHAR(V_SHIFT_IN_TIME,'HH:MI AM'),'HH:MI AM');
    V_IN_TIME_DIFF     :=ABS(V_SHIFT_IN_TIME-V_IN_TIME);
    V_IN_TIME_DIFF_MIN :=V_IN_TIME_DIFF     *24*60;
    --
    IF(V_IN_TIME          = V_OUT_TIME) THEN
      IF V_MIN_IN_TIME   IS NULL THEN
        V_MIN_IN_TIME    :=V_IN_TIME_DIFF;
        V_SHIFT_ID       :=shift.SHIFT_ID;
      ELSIF V_IN_TIME_DIFF<V_MIN_IN_TIME THEN
        V_MIN_IN_TIME    :=V_IN_TIME_DIFF;
        V_SHIFT_ID       :=shift.SHIFT_ID;
      END IF;
      CONTINUE;
    END IF;
    --
    V_SHIFT_OUT_TIME                       := shift.END_TIME-(.000694*NVL(shift.EARLY_OUT,0));
    V_SHIFT_OUT_TIME                       :=TO_DATE(TO_CHAR(V_SHIFT_OUT_TIME,'HH:MI AM'),'HH:MI AM');
    V_OUT_TIME_DIFF                        :=ABS(V_SHIFT_OUT_TIME-V_OUT_TIME);
    V_OUT_TIME_DIFF_MIN                    := V_OUT_TIME_DIFF    *24*60;
    IF(V_MIN_IN_OUT_TIME                   IS NULL ) THEN
      V_MIN_IN_OUT_TIME                    :=V_IN_TIME_DIFF+V_OUT_TIME_DIFF;
      V_SHIFT_ID                           :=shift.SHIFT_ID;
    ELSIF (V_IN_TIME_DIFF                                  +V_OUT_TIME_DIFF) <V_MIN_IN_OUT_TIME THEN
      V_MIN_IN_OUT_TIME                    :=V_IN_TIME_DIFF+V_OUT_TIME_DIFF;
      V_SHIFT_ID                           :=shift.SHIFT_ID;
    END IF;
  END LOOP;
RETURN V_SHIFT_ID;
END;CREATE OR REPLACE FUNCTION HRIS_IS_EMP_IN(
    P_EMPLOYEE_ID  NUMBER,
    P_TABLE_NAME   VARCHAR2,
    P_COLUMN_NAME  VARCHAR2,
    P_COLUMN_VALUE NUMBER )
  RETURN CHAR
AS
  V_COMPANY       VARCHAR2(4000 BYTE);
  V_BRANCH        VARCHAR2(4000 BYTE);
  V_DEPARTMENT    VARCHAR2(4000 BYTE);
  V_DESIGNATION   VARCHAR2(4000 BYTE);
  V_POSITION      VARCHAR2(4000 BYTE);
  V_SERVICE_TYPE  VARCHAR2(4000 BYTE);
  V_EMPLOYEE_TYPE VARCHAR2(4000 BYTE);
  V_GENDER        VARCHAR2(4000 BYTE);
  V_EMPLOYEE      VARCHAR2(4000 BYTE);
  V_QUERY_FIRST   VARCHAR2(4000 BYTE);
  V_QUERY_SECOND  VARCHAR2(4000 BYTE);
  V_RETURN        CHAR(1 BYTE);
BEGIN
  V_QUERY_FIRST :='SELECT COMPANY_ID,BRANCH_ID,DEPARTMENT_ID,POSITION_ID,SERVICE_TYPE_ID,EMPLOYEE_TYPE,GENDER_ID,EMPLOYEE_ID FROM '||P_TABLE_NAME||' WHERE '||P_COLUMN_NAME||' ='||P_COLUMN_VALUE;
  EXECUTE IMMEDIATE V_QUERY_FIRST INTO V_COMPANY,V_BRANCH,V_DEPARTMENT,V_POSITION,V_SERVICE_TYPE,V_EMPLOYEE_TYPE,V_GENDER,V_EMPLOYEE;
  V_QUERY_SECOND   :='SELECT EMPLOYEE_ID FROM HRIS_EMPLOYEES WHERE 1=1';
  IF(V_COMPANY     IS NOT NULL) THEN
    V_QUERY_SECOND := V_QUERY_SECOND||' AND COMPANY_ID IN ('||V_COMPANY||')';
  END IF;
IF(V_BRANCH      IS NOT NULL) THEN
  V_QUERY_SECOND := V_QUERY_SECOND||' AND BRANCH_ID IN ('||V_BRANCH||')';
END IF;
IF(V_DEPARTMENT  IS NOT NULL) THEN
  V_QUERY_SECOND := V_QUERY_SECOND||' AND DEPARTMENT_ID IN ('||V_DEPARTMENT||')';
END IF;
IF(V_DESIGNATION IS NOT NULL) THEN
  V_QUERY_SECOND := V_QUERY_SECOND||' AND DESIGNATION_ID IN ('||V_DESIGNATION||')';
END IF;
IF(V_POSITION    IS NOT NULL) THEN
  V_QUERY_SECOND := V_QUERY_SECOND||' AND POSITION_ID IN ('||V_POSITION||')';
END IF;
IF(V_SERVICE_TYPE IS NOT NULL) THEN
  V_QUERY_SECOND  := V_QUERY_SECOND||' AND SERVICE_TYPE_ID IN ('||V_SERVICE_TYPE||')';
END IF;
IF(V_EMPLOYEE_TYPE IS NOT NULL) THEN
  V_QUERY_SECOND   := V_QUERY_SECOND||' AND EMPLOYEE_TYPE IN ('||V_EMPLOYEE_TYPE||')';
END IF;
IF(V_GENDER      IS NOT NULL) THEN
  V_QUERY_SECOND := V_QUERY_SECOND||' AND GENDER_ID IN ('||V_GENDER||')';
END IF;
IF(V_EMPLOYEE    IS NOT NULL) THEN
  V_QUERY_SECOND := V_QUERY_SECOND||' AND EMPLOYEE_ID IN ('||V_EMPLOYEE||')';
END IF;
EXECUTE IMMEDIATE 'SELECT (CASE WHEN COUNT(*) >0 THEN  ''Y'' ELSE ''N'' END) FROM ('||V_QUERY_SECOND||') WHERE EMPLOYEE_ID = '||P_EMPLOYEE_ID INTO V_RETURN;
RETURN V_RETURN;
END;create or replace FUNCTION HRIS_AVAILABLE_LEAVE_DAYS(
    P_START_DATE DATE,
    P_END_DATE   DATE,
    P_EMPLOYEE_ID HRIS_EMPLOYEES.EMPLOYEE_ID%TYPE)
  RETURN NUMBER
AS
  V_WEEKDAY1 HRIS_SHIFTS.WEEKDAY1%TYPE;
  V_WEEKDAY2 HRIS_SHIFTS.WEEKDAY2%TYPE;
  V_WEEKDAY3 HRIS_SHIFTS.WEEKDAY3%TYPE;
  V_WEEKDAY4 HRIS_SHIFTS.WEEKDAY4%TYPE;
  V_WEEKDAY5 HRIS_SHIFTS.WEEKDAY5%TYPE;
  V_WEEKDAY6 HRIS_SHIFTS.WEEKDAY6%TYPE;
  V_WEEKDAY7 HRIS_SHIFTS.WEEKDAY7%TYPE;
  V_DATE_DIFF     NUMBER:= TRUNC(P_END_DATE)-TRUNC(P_START_DATE);
  V_WEEKDAY       NUMBER;
  V_DAYOFF_COUNT  NUMBER:=0;
  V_HOLIDAY_COUNT NUMBER:=0;
  V_HOLIDAY_ID    NUMBER:=NULL;
BEGIN
  BEGIN
    SELECT S.WEEKDAY1,
      S.WEEKDAY2,
      S.WEEKDAY3,
      S.WEEKDAY4,
      S.WEEKDAY5,
      S.WEEKDAY6,
      S.WEEKDAY7
    INTO V_WEEKDAY1,
      V_WEEKDAY2,
      V_WEEKDAY3,
      V_WEEKDAY4,
      V_WEEKDAY5,
      V_WEEKDAY6,
      V_WEEKDAY7
    FROM HRIS_SHIFTS S
    JOIN HRIS_EMPLOYEE_SHIFT_ASSIGN SA
    ON (S.SHIFT_ID     =SA.SHIFT_ID)
    WHERE S.STATUS     ='E'
    AND SA.STATUS      ='E'
    AND SA.EMPLOYEE_ID = P_EMPLOYEE_ID
    AND ROWNUM         =1;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    SELECT S.WEEKDAY1,
      S.WEEKDAY2,
      S.WEEKDAY3,
      S.WEEKDAY4,
      S.WEEKDAY5,
      S.WEEKDAY6,
      S.WEEKDAY7
    INTO V_WEEKDAY1,
      V_WEEKDAY2,
      V_WEEKDAY3,
      V_WEEKDAY4,
      V_WEEKDAY5,
      V_WEEKDAY6,
      V_WEEKDAY7
    FROM HRIS_SHIFTS S
    WHERE S.DEFAULT_SHIFT ='Y'
    AND STATUS            = 'E';
  END;
FOR i IN 0..V_DATE_DIFF
LOOP
  SELECT TO_CHAR(TRUNC(P_START_DATE+i),'d') INTO V_WEEKDAY FROM DUAL;
  IF (V_WEEKDAY     = 1 AND V_WEEKDAY1 = 'DAY_OFF') THEN
    V_DAYOFF_COUNT :=V_DAYOFF_COUNT+1;
    CONTINUE;
  END IF;
  IF (V_WEEKDAY     = 2 AND V_WEEKDAY2 = 'DAY_OFF') THEN
    V_DAYOFF_COUNT :=V_DAYOFF_COUNT+1;
    CONTINUE;
  END IF;
  IF (V_WEEKDAY     = 3 AND V_WEEKDAY4 = 'DAY_OFF') THEN
    V_DAYOFF_COUNT :=V_DAYOFF_COUNT+1;
    CONTINUE;
  END IF;
  IF (V_WEEKDAY     = 4 AND V_WEEKDAY4 = 'DAY_OFF') THEN
    V_DAYOFF_COUNT :=V_DAYOFF_COUNT+1;
    CONTINUE;
  END IF;
  IF (V_WEEKDAY     = 5 AND V_WEEKDAY5 = 'DAY_OFF') THEN
    V_DAYOFF_COUNT :=V_DAYOFF_COUNT+1;
    CONTINUE;
  END IF;
  IF (V_WEEKDAY     = 6 AND V_WEEKDAY6 = 'DAY_OFF') THEN
    V_DAYOFF_COUNT :=V_DAYOFF_COUNT+1;
    CONTINUE;
  END IF;
  IF (V_WEEKDAY     = 7 AND V_WEEKDAY7 = 'DAY_OFF') THEN
    V_DAYOFF_COUNT :=V_DAYOFF_COUNT+1;
    CONTINUE;
  END IF;
  BEGIN
    SELECT H.HOLIDAY_ID
    INTO V_HOLIDAY_ID
    FROM HRIS_HOLIDAY_MASTER_SETUP H
    JOIN HRIS_EMPLOYEE_HOLIDAY EH
    ON (H.HOLIDAY_ID  = EH.HOLIDAY_ID )
    WHERE H.STATUS    ='E'
    AND EH.EMPLOYEE_ID= P_EMPLOYEE_ID
    AND ((P_START_DATE               +i) BETWEEN H.START_DATE AND H.END_DATE);
    V_HOLIDAY_COUNT :=V_HOLIDAY_COUNT+1;
  EXCEPTION
  WHEN no_data_found THEN
    NULL;
  WHEN TOO_MANY_ROWS THEN
    V_HOLIDAY_COUNT :=V_HOLIDAY_COUNT+1;
  END;
END LOOP;
RETURN (V_DATE_DIFF+1)-V_DAYOFF_COUNT-V_HOLIDAY_COUNT;
END;CREATE OR REPLACE FUNCTION HRIS_VALIDATE_LEAVE_REQUEST(
    P_START_DATE HRIS_EMPLOYEE_LEAVE_REQUEST.START_DATE%TYPE,
    P_END_DATE HRIS_EMPLOYEE_LEAVE_REQUEST.END_DATE%TYPE,
    P_EMPLOYEE_ID HRIS_EMPLOYEE_LEAVE_REQUEST.EMPLOYEE_ID%TYPE)
  RETURN VARCHAR2
AS
  V_MONTH_FROM_DATE      DATE;
  V_MONTH_TO_DATE        DATE;
  V_OVERLAPPING_LEAVE_NO NUMBER:=0;
BEGIN
  SELECT FROM_DATE,
    TO_DATE
  INTO V_MONTH_FROM_DATE,
    V_MONTH_TO_DATE
  FROM HRIS_MONTH_CODE
  WHERE TRUNC(SYSDATE) BETWEEN FROM_DATE AND TO_DATE;
  --
  IF(TRUNC(P_START_DATE)<TRUNC(V_MONTH_FROM_DATE)) THEN
    RETURN 'Leave Request to previous month is not allowed.';
  END IF;
--
SELECT COUNT(*)
INTO V_OVERLAPPING_LEAVE_NO
FROM HRIS_EMPLOYEE_LEAVE_REQUEST
WHERE ((TRUNC(P_START_DATE) BETWEEN START_DATE AND END_DATE)
OR (TRUNC(P_END_DATE) BETWEEN START_DATE AND END_DATE))
AND STATUS      IN ('RQ','RC','AP')
AND EMPLOYEE_ID = P_EMPLOYEE_ID ;
--
IF(V_OVERLAPPING_LEAVE_NO >0) THEN
  RETURN 'Leave Request is overlapping other leave request.';
END IF;
RETURN NULL;
END;create or replace FUNCTION LATE_STATUS_DESC(
    P_STATUS HRIS_ATTENDANCE_DETAIL.LATE_STATUS%TYPE)
  RETURN VARCHAR2
IS
  V_STATUS_DESC VARCHAR2(50 BYTE);
BEGIN
  V_STATUS_DESC:=
  (
    CASE P_STATUS
    WHEN 'L' THEN
      '[Late In]'
    WHEN 'E'THEN
      '[Early Out]'
    WHEN 'B' THEN
      '[Late In and Early Out]'
    WHEN 'X' THEN
      '[Missed Punch]'
    WHEN 'Y' THEN
      '[Late In and Missed Punch]'
    END);
  RETURN V_STATUS_DESC;
END;
 create or replace FUNCTION LEAVE_STATUS_DESC(
    P_STATUS HRIS_EMPLOYEE_LEAVE_REQUEST.STATUS%TYPE)
  RETURN VARCHAR2
IS
  V_STATUS_DESC VARCHAR2(50 BYTE);
BEGIN
  V_STATUS_DESC:=
  (
    CASE P_STATUS
    WHEN 'RQ' THEN
      'Pending'
    WHEN 'RC'THEN
      'Recommended'
    WHEN 'R' THEN
      'Rejected'
    WHEN 'AP' THEN
      'Approved'
    WHEN 'C' THEN
      'Cancelled'
    END);
  RETURN V_STATUS_DESC;
END;create or replace FUNCTION MIN_TO_HOUR(
    P_MIN NUMBER)
  RETURN VARCHAR2
IS
  V_HOUR NUMBER;
  V_MIN  NUMBER;
BEGIN
  IF(P_MIN IS NULL) THEN
    RETURN NULL;
  END IF;
V_HOUR :=TRUNC(P_MIN/60,0);
V_MIN  :=MOD(P_MIN,60) ;
RETURN V_HOUR||':'||V_MIN;
END;
 create or replace FUNCTION NOTIFICATION_STATUS_DESC(
    P_STATUS HRIS_NOTIFICATION.STATUS%TYPE)
  RETURN VARCHAR2
IS
  V_STATUS_DESC VARCHAR2(50 BYTE);
BEGIN
  V_STATUS_DESC:=
  (
    CASE P_STATUS
    WHEN 'S' THEN
      'Seen'
    WHEN 'U'THEN
      'Unseen'
    END);
  RETURN V_STATUS_DESC;
END;create or replace FUNCTION REC_APP_ROLE(
    P_EMPLOYEE_ID HRIS_EMPLOYEES.EMPLOYEE_ID%TYPE,
    P_RECOMMENDER_ID HRIS_RECOMMENDER_APPROVER.RECOMMEND_BY%TYPE,
    P_APPROVER_ID HRIS_RECOMMENDER_APPROVER.APPROVED_BY%TYPE )
  RETURN VARCHAR2
IS
  V_ROLE_TYPE NUMBER;
BEGIN
  IF(P_EMPLOYEE_ID = P_RECOMMENDER_ID AND P_EMPLOYEE_ID = P_APPROVER_ID)THEN
    V_ROLE_TYPE   :=4;
  ELSE
    IF(P_EMPLOYEE_ID = P_RECOMMENDER_ID) THEN
      V_ROLE_TYPE   :=2;
    END IF;
    IF(P_EMPLOYEE_ID= P_APPROVER_ID) THEN
      V_ROLE_TYPE  :=3;
    END IF;
  END IF;
RETURN V_ROLE_TYPE;
END;create or replace FUNCTION REC_APP_ROLE_NAME(
    P_EMPLOYEE_ID HRIS_EMPLOYEES.EMPLOYEE_ID%TYPE,
    P_RECOMMENDER_ID HRIS_RECOMMENDER_APPROVER.RECOMMEND_BY%TYPE,
    P_APPROVER_ID HRIS_RECOMMENDER_APPROVER.APPROVED_BY%TYPE )
  RETURN VARCHAR2
IS
  V_ROLE_TYPE VARCHAR2(50 BYTE);
BEGIN
  IF(P_EMPLOYEE_ID = P_RECOMMENDER_ID AND P_EMPLOYEE_ID = P_APPROVER_ID)THEN
    V_ROLE_TYPE   :='Recommender/Approver';
  ELSE
    IF(P_EMPLOYEE_ID = P_RECOMMENDER_ID) THEN
      V_ROLE_TYPE   :='Recommender';
    END IF;
    IF(P_EMPLOYEE_ID= P_APPROVER_ID) THEN
      V_ROLE_TYPE  :='Approver';
    END IF;
  END IF;
RETURN V_ROLE_TYPE;
END;CREATE OR REPLACE FUNCTION "ROLE_CONTROL_DESC"(
    P_FLAG HRIS_ROLES.CONTROL%TYPE)
  RETURN VARCHAR2
IS
  V_FLAG_DESC VARCHAR2(50 BYTE);
BEGIN
  V_FLAG_DESC:=
  (
    CASE P_FLAG
    WHEN 'F' THEN
      'Full'
    WHEN 'C'THEN
      'Company Specific'
    WHEN 'U'THEN
      'User Specific'
    WHEN 'B'THEN
      'Branch Specific'
    WHEN 'DP'THEN
      'Department Specific'
    WHEN 'DS'THEN
      'Designation Specific'
    WHEN 'P'THEN
      'Position Specific'
    END);
  RETURN V_FLAG_DESC;
END;CREATE OR REPLACE FUNCTION STATUS_DESC(
    P_FLAG CHAR)
  RETURN VARCHAR2
IS
  V_FLAG_DESC VARCHAR2(50 BYTE);
BEGIN
  V_FLAG_DESC:=
  (
    CASE P_FLAG
    WHEN 'E' THEN
      'Enabled'
    WHEN 'D'THEN
      'Disabled'
    END);
  RETURN V_FLAG_DESC;
END; create or replace FUNCTION TRAINING_TYPE_DESC(
    P_TRAINING_TYPE HRIS_EMPLOYEE_TRAINING_REQUEST.TRAINING_TYPE%TYPE)
  RETURN VARCHAR2
IS
  V_TRAINING_TYPE_DESC VARCHAR2(50 BYTE);
BEGIN
  V_TRAINING_TYPE_DESC:=
  (
    CASE P_TRAINING_TYPE
    WHEN 'CC' THEN
      'Company Contribution'
    WHEN 'RC'THEN
      'Personal'
    END);
  RETURN V_TRAINING_TYPE_DESC;
END;CREATE OR REPLACE FUNCTION WORKING_CYCLE_DESC(
    P_WORKING_CYCLE CHAR)
  RETURN VARCHAR2
IS
  V_WORKING_CYCLE_DESC VARCHAR2(50 BYTE);
BEGIN
  V_WORKING_CYCLE_DESC:=
  (
    CASE P_WORKING_CYCLE
    WHEN 'W' THEN
      'Weekly'
    WHEN 'M'THEN
      'Monthly'
    WHEN 'R' THEN
      'Randomly'
    END);
  RETURN V_WORKING_CYCLE_DESC;
END; 